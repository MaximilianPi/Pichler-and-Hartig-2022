---
title: "Supporting information S1 for Pichler & Hartig – Machine Learning and Deep Learning – A review for Ecologists"
author: Pichler & Hartig, 2022
format: 
  docx:
    toc: true
    number-sections: true
    reference-doc: custom-reference-doc.docx
  html: default
bibliography: ML_Introduction/references.bib
---

```{r setup2, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
reticulate::use_condaenv("r-sjsdm", required = TRUE)
#reticulate::use_python("/home/maxpichler/miniconda3/envs/r-sjsdm/bin/python", required = TRUE)
```

**Summary:** This document provides supporting information on Pichler & Hartig -- Machine Learning and Deep Learning -- A review for ecologists. The first section describes the methods for the trend analysis and the word clouds, the second section demnstrates the application of common supervised Machine learning and Deep learning algorithms in the R programming languages based on code examples.

## Trend analysis

For the global trend analysis in Figure 1, we used the R package 'europepmc' (v0.4.1, @jahn_europepmc_2021) to search from 1920 to 2021 the PubMed and Medline NLM databases. We used the following queries 'deep learning', ('machine learning' OR 'machine-learning'), and ('p value' OR 'p-value' OR 'statistically significant) as representatives for Deep Learning, Machine Learning, and classical statistical approaches. The number of hits were normalized by total hits in each year. For the stream charts in Figure 2, we used the search queries Table S1 and added them to the query' AND ("ecology" OR "ecolog\*" OR "evolution") to restrict the queries to hits from the ecology and evolution field.

```{r, echo=FALSE, fig.cap="Search queries and their corresponding ML and DL algorithm."}
#library(flextable)
#set_flextable_defaults(fonts_ignore=TRUE)
queries = c(
  '("artificial neural network" OR "deep neural network" OR 
  "multi-layer perceptron" OR "fully connected neural network")',
  '("convolutional neural network" OR "object detection")',
  '("recurrent neural network")',
  '("graph neural network" OR "graph convolutional")',
  '("random forest")',
  '("boosted regression tree" OR "boosted reg" OR 
  "gradient boosting" OR "adaboost")',
  '("k-nearest-neighbor")',
  '("ridge regression" OR "lasso regression" OR 
  "elastic-net" OR "elastic net")',
  '("support vector machine" OR "support vector")'
)
algorithms = c(
  "Deep neural network (ANN)",
  "Convolutional neural network (CNN)",
  "Recurrent neural network (RNN)",
  "Graph neural network (GNN)",
  "Random Forest (RF)",
  "Boosted Regression Trees (BRT)",
  "k-nearest neighbor (kNN)",
  "Ridge, lasso, or elastic-net regression",
  "Support vector machine (SVM)"
)
data = data.frame(cbind(queries, algorithms))
colnames(data) = c("Queries", "ML and DL algorithm")
#fl = flextable(data)
#fl = set_caption(fl, caption = "Search queries and their corresponding ML and DL algorithm.")
#fl = theme_zebra(fl)
#fl = set_table_properties(fl, width = .3, layout = "autofit")
#fl
knitr::kable(data)
```

For the word clouds in Table 1, we used again the 'europepmc' R package to search abstracts and titles within the ML and DL algorithm specific queries (Table 1) for the following ecological keywords: species distribution, species interaction, mortality, remote sensing, invasive, decision making, ecosystem, species identification, species detection, extinction, functional trait, ecological network, biodiversity, and camera trap.

We used the R packages 'tm' (@feinerer2008), 'wordcloud' (@wordcloud2018) ,and 'wordcloud2' (@wordcloud_2_2018) to analyze and create the final word cloud plots.

## Algorithms

The goal of this chapter is to provide short code examples for all common supervised ML algorithms. All examples are shown in the R programming language and are demonstrated at the example of the iris dataset (4 continuous and 1 nominal variables). We demonstrate a) how to apply the algorithms on classification tasks (response = nominal, three species) and how to generate class specific (quasi) probability predictions and b) how to apply the algorithms to regression tasks (response = continuous) and make continuous predictions.


{{< include ML_Introduction/elastic_net.qmd >}}
{{< include ML_Introduction/svm.qmd >}}
{{< include ML_Introduction/knn.qmd >}}
{{< include ML_Introduction/rf.qmd >}}
{{< include ML_Introduction/brt.qmd >}}
{{< include ML_Introduction/dnn.qmd >}}
{{< include ML_Introduction/cnn.qmd >}}
{{< include ML_Introduction/rnn.qmd >}}
{{< include ML_Introduction/gnn.qmd >}}
{{< include ML_Introduction/refs.qmd >}}

