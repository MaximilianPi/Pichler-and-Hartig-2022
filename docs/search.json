[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to Machine Learning and Deep Learning",
    "section": "",
    "text": "The goal of this book is to provide short code examples for all common supervised ML algorithms. All examples are shown in the R programming language and are demonstrated at the example of the iris dataset (4 continuous and 1 nominal variables). We demonstrate a) how to apply the algorithms on classification tasks (response = nominal, three species) and how to generate class specific (quasi) probability predictions and b) how to apply the algorithms to regression tasks (response = continuous) and make continuous predictions."
  },
  {
    "objectID": "elastic_net.html",
    "href": "elastic_net.html",
    "title": "1  Ridge, LASSO, and elastic-net regression",
    "section": "",
    "text": "We can use the ‘glmnet’ R package (Simon et al. (2011)) for Ridge, LASSO, or elastic-net regularization. The ‘glmnet’ package supports different response families including ‘gaussian’, ‘binomial’ and ‘Poisson’. The strength of the regularization is set by the ‘lambda’ argument (\\(\\lambda\\)) and the weighting between Ridge and LASSO regularization by the ‘alpha’ parameter (\\(\\alpha\\)):\n\\[\n\\lambda*[(1 - \\alpha)\\|\\beta\\|_1 + \\alpha\\|\\beta||^2]\n\\] Setting alpha = 0 turns off the LASSO and alpha = 1 the Ridge. Alphas between (0,1) will use both regularization types, turning the model into an elastic-net regularization.\nWhen using regularization, it is important to scale all features otherwise effects for features that are on a larger scale are stronger regularized.\nIn python, the ‘scikit-learn’ package provides an interface for many different ML algorithms, including elastic-net regression models (Pedregosa et al. (2011)).\nThe ‘MLJ’ package provides a generic interface for different ML algorithms (Blaom et al. (2019)). Elastic-net regression models can be accessed via the ‘MLJLinearModels’ package within MLJ."
  },
  {
    "objectID": "elastic_net.html#classification",
    "href": "elastic_net.html#classification",
    "title": "1  Ridge, LASSO, and elastic-net regression",
    "section": "1.1 Classification",
    "text": "1.1 Classification\nBuild models (for regularization it is important to scale the features):\n\nRPythonJulia\n\n\n\nlibrary(glmnet)\nX = scale(iris[,1:4])\nY = iris$Species\n\n# Ridge:\nridge = glmnet(X, Y, family = \"multinomial\", alpha = 0, lambda = 0.01)\n\n# LASSO:\nlasso = glmnet(X, Y, family = \"multinomial\", alpha = 1, lambda = 0.01)\n\n# Elastic-net:\nelastic = glmnet(X, Y, family = \"multinomial\", alpha = 0.5, lambda = 0.01)\n\nMake predictions (class probabilities):\n\nhead(predict(lasso, newx = X, type = \"response\")[,,1], n = 3)\n\n        setosa versicolor    virginica\n[1,] 0.9858987 0.01410131 3.438452e-09\n[2,] 0.9668897 0.03311031 1.397684e-08\n[3,] 0.9815369 0.01846312 5.279315e-09\n\n\n\n\nIn the sklearn implementation the regularization strength parameter ‘C’ corresponds to the lambda parameter from glmnet:\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import datasets\nfrom sklearn.preprocessing import scale\niris = datasets.load_iris()\nX = scale(iris.data)\nY = iris.target\n\nModels:\n\n\n# Ridge:\nridge = LogisticRegression(multi_class='multinomial', \n                           penalty = \"l2\", \n                           C = 0.01, \n                           solver=\"saga\")\nridge.fit(X, Y)\n\n# LASSO:\n\nLogisticRegression(C=0.01, multi_class='multinomial', solver='saga')In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LogisticRegressionLogisticRegression(C=0.01, multi_class='multinomial', solver='saga')\n\nlasso = LogisticRegression(multi_class='multinomial', \n                           penalty = \"l1\", \n                           C = 0.01, \n                           solver=\"saga\")\nlasso.fit(X, Y)\n\n# Elastic-net:\n\nLogisticRegression(C=0.01, multi_class='multinomial', penalty='l1',\n                   solver='saga')In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LogisticRegressionLogisticRegression(C=0.01, multi_class='multinomial', penalty='l1',\n                   solver='saga')\n\nelastic = LogisticRegression(multi_class='multinomial', \n                             penalty = \"elasticnet\", \n                             C = 0.01, \n                             l1_ratio=0.5, \n                             solver=\"saga\")\nelastic.fit(X, Y)\n\nLogisticRegression(C=0.01, l1_ratio=0.5, multi_class='multinomial',\n                   penalty='elasticnet', solver='saga')In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LogisticRegressionLogisticRegression(C=0.01, l1_ratio=0.5, multi_class='multinomial',\n                   penalty='elasticnet', solver='saga')\n\n\nPredictions (probabilities):\n\n\nlasso.predict_proba(X)[0:5,:]\n\narray([[0.27313906, 0.3878848 , 0.33897614],\n       [0.27313906, 0.3878848 , 0.33897614],\n       [0.27313906, 0.3878848 , 0.33897614],\n       [0.27313906, 0.3878848 , 0.33897614],\n       [0.27313906, 0.3878848 , 0.33897614]])\n\n\n\n\n\nimport StatsBase;\nusing MLJ;\nusing MLJLinearModels;\n@load MultinomialClassifier pkg=MLJLinearModels;\nusing RDatasets;\nusing StatsBase;\nusing DataFrames;\n\n\niris = dataset(\"datasets\", \"iris\");\nX = mapcols(StatsBase.zscore, iris[:, 1:4]);\nY = iris[:, 5];\n\nModels:\n\n\n# Ridge\nridge = fit!(machine(MultinomialClassifier(lambda = 0.01, penalty = \"l2\"), X, Y));\n\n# Lasso\nlasso = fit!(machine(MultinomialClassifier(lambda = 0.01, penalty = \"l1\"), X, Y));\n\n\n# Elastic-net\nelastic = fit!(machine(MultinomialClassifier(lambda = 0.01, gamma = 0.01, penalty = \"en\"), X, Y));\n\nPredictions:\n\nMLJ.predict(lasso, X)[1:5]\n\n5-element CategoricalDistributions.UnivariateFiniteVector{Multiclass{3}, String, UInt8, Float64}:\n UnivariateFinite{Multiclass{3}}(setosa=>0.992, versicolor=>0.00829, virginica=>2.2e-9)\n UnivariateFinite{Multiclass{3}}(setosa=>0.969, versicolor=>0.031, virginica=>1.4e-8)\n UnivariateFinite{Multiclass{3}}(setosa=>0.985, versicolor=>0.0149, virginica=>4.6e-9)\n UnivariateFinite{Multiclass{3}}(setosa=>0.971, versicolor=>0.0293, virginica=>1.41e-8)\n UnivariateFinite{Multiclass{3}}(setosa=>0.994, versicolor=>0.00635, virginica=>1.51e-9)"
  },
  {
    "objectID": "elastic_net.html#regression",
    "href": "elastic_net.html#regression",
    "title": "1  Ridge, LASSO, and elastic-net regression",
    "section": "1.2 Regression",
    "text": "1.2 Regression\n\nRPythonJulia\n\n\n\nX = scale(iris[,2:4])\nY = iris[,1]\n\n# Ridge:\nridge = glmnet(X, Y, family = gaussian(), alpha = 0, lambda = 0.01)\n\n# LASSO:\nlasso = glmnet(X, Y, family = gaussian(), alpha = 1, lambda = 0.01)\n\n# Elastic-net:\nelastic = glmnet(X, Y, family = gaussian(), alpha = 0.5, lambda = 0.01)\n\nMake predictions (class probabilities):\n\nhead(predict(lasso, newx = X), n = 3)\n\n           s0\n[1,] 5.006484\n[2,] 4.720600\n[3,] 4.781548\n\n\n\n\nFor regressions we can use the ElasticNet model class, here, however, lambda corresponds to alpha and l1_ratio to the alpha parameter.\n\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn import datasets\nfrom sklearn.preprocessing import scale\niris = datasets.load_iris()\ndata = iris.data\nX = scale(data[:,1:4])\nY = data[:,0]\n\n\n# Ridge:\nridge = ElasticNet(alpha = 0.01,\n                   l1_ratio = 0.011)\nridge.fit(X, Y)\n\n# LASSO:\n\nElasticNet(alpha=0.01, l1_ratio=0.011)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.ElasticNetElasticNet(alpha=0.01, l1_ratio=0.011)\n\nlasso = ElasticNet(alpha = 0.01,\n                   l1_ratio = 1.0)\nlasso.fit(X, Y)\n\n# Elastic-net:\n\nElasticNet(alpha=0.01, l1_ratio=1.0)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.ElasticNetElasticNet(alpha=0.01, l1_ratio=1.0)\n\nelastic = ElasticNet(alpha = 0.01,\n                     l1_ratio = 0.5)\nelastic.fit(X, Y)\n\n# Make predictions:\n\nElasticNet(alpha=0.01)In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.ElasticNetElasticNet(alpha=0.01)\n\nlasso.predict(X)[0:10]\n\narray([5.0064384 , 4.72032938, 4.78125162, 4.83107256, 5.06366021,\n       5.36149937, 4.93202142, 5.00273797, 4.66310758, 4.84826774])\n\n\n\n\n\nimport StatsBase;\nusing MLJ;\nusing MLJLinearModels;\n@load LassoRegressor pkg=MLJLinearModels;\n@load RidgeRegressor pkg=MLJLinearModels;\n@load ElasticNetRegressor pkg=MLJLinearModels;\nusing RDatasets;\nusing DataFrames;\n\n\niris = dataset(\"datasets\", \"iris\");\nX = mapcols(StatsBase.zscore, iris[:, 2:4]);\nY = iris[:, 1];\n\nModels:\n\n# Ridge\nridge = fit!(machine(RidgeRegressor(lambda = 0.01), X, Y));\n\n# Lasso\nlasso = fit!(machine(LassoRegressor(lambda = 0.01), X, Y));\n\n\n# Elastic-net\nelastic = fit!(machine(ElasticNetRegressor(lambda = 0.01, gamma = 0.01), X, Y));\n\nPredictions (probabilities):\n\nMLJ.predict(lasso, X)[1:5]\n\n5-element Vector{Float64}:\n 5.007709152258313\n 4.711530001523257\n 4.770100849643125\n 4.830666643844422\n 5.0669449824053245\n\n\n\n\n\n\n\n\n\nBlaom, Anthony, Franz Kiraly, Thibaut Lienart, and Sebastian Vollmer. 2019. Alan-Turing-Institute/MLJ.jl: V0.5.3 (version v0.5.3). Zenodo. https://doi.org/10.5281/zenodo.3541506.\n\n\nPedregosa, F., G. Varoquaux, A. Gramfort, V. Michel, B. Thirion, O. Grisel, M. Blondel, et al. 2011. “Scikit-Learn: Machine Learning in Python.” Journal of Machine Learning Research 12: 2825–30.\n\n\nSimon, Noah, Jerome Friedman, Trevor Hastie, and Rob Tibshirani. 2011. “Regularization Paths for Cox’s Proportional Hazards Model via Coordinate Descent.” Journal of Statistical Software 39 (5): 1–13. https://doi.org/10.18637/jss.v039.i05."
  },
  {
    "objectID": "svm.html",
    "href": "svm.html",
    "title": "2  Support Vector Machines",
    "section": "",
    "text": "The support vector machine (SVM) algorithm estimates hyper-planes to separate our response species. In the following we use the ‘e1071’ package which supports a variety of different SVM algorithms (Meyer et al. (2022)) (Python: ‘scikit-learn’ (Pedregosa et al. (2011)), Julia: ‘MLJ’ (Blaom et al. (2019)))."
  },
  {
    "objectID": "svm.html#classification",
    "href": "svm.html#classification",
    "title": "2  Support Vector Machines",
    "section": "2.1 Classification",
    "text": "2.1 Classification\n\nRPythonJulia\n\n\n\nlibrary(e1071)\nX = scale(iris[,1:4])\nY = iris$Species\n\nsv = svm(X, Y, probability = TRUE) \nsummary(sv)\n\n\nCall:\nsvm.default(x = X, y = Y, probability = TRUE)\n\n\nParameters:\n   SVM-Type:  C-classification \n SVM-Kernel:  radial \n       cost:  1 \n\nNumber of Support Vectors:  51\n\n ( 8 22 21 )\n\n\nNumber of Classes:  3 \n\nLevels: \n setosa versicolor virginica\n\n\nMake predictions (class probabilities):\n\nhead(attr(predict(sv, newdata = X, probability = TRUE), \"probabilities\"), n = 3)\n\n     setosa versicolor  virginica\n1 0.9791731 0.01135581 0.00947110\n2 0.9716762 0.01816135 0.01016248\n3 0.9777791 0.01198490 0.01023600\n\n\n\n\n\nfrom sklearn import svm\nfrom sklearn import datasets\nfrom sklearn.preprocessing import scale\niris = datasets.load_iris()\nX = scale(iris.data)\nY = iris.target\n\nmodel = svm.SVC(probability=True).fit(X, Y)\n\n# Make predictions (class probabilities):\n\nmodel.predict_proba(X)[0:10,:]\n\narray([[0.97956765, 0.01168732, 0.00874504],\n       [0.97215052, 0.01844973, 0.00939975],\n       [0.9783134 , 0.01226308, 0.00942351],\n       [0.9742125 , 0.01567632, 0.01011118],\n       [0.97870322, 0.01206444, 0.00923234],\n       [0.97312428, 0.01729716, 0.00957855],\n       [0.97486896, 0.01395157, 0.01117947],\n       [0.97946381, 0.01179526, 0.00874092],\n       [0.96530784, 0.02294644, 0.01174573],\n       [0.97603545, 0.01443107, 0.00953347]])\n\n\n\n\n\nimport StatsBase;\nusing MLJ;\nSVM_classifier = @load NuSVC pkg=LIBSVM;\nusing RDatasets;\nusing StatsBase;\nusing DataFrames;\n\n\niris = dataset(\"datasets\", \"iris\");\nX = mapcols(StatsBase.zscore, iris[:, 1:4]);\nY = iris[:, 5];\n\nModels:\n\nmodel = fit!(machine(SVM_classifier(), X, Y))\n\ntrained Machine; caches model-specific representations of data\n  model: NuSVC(kernel = RadialBasis, …)\n  args: \n    1:  Source @424 ⏎ Table{AbstractVector{Continuous}}\n    2:  Source @132 ⏎ AbstractVector{Multiclass{3}}\n\n\nPredictions:\n\nMLJ.predict(model, X)[1:5]\n\n5-element CategoricalArrays.CategoricalArray{String,1,UInt8}:\n \"setosa\"\n \"setosa\"\n \"setosa\"\n \"setosa\"\n \"setosa\""
  },
  {
    "objectID": "svm.html#regression",
    "href": "svm.html#regression",
    "title": "2  Support Vector Machines",
    "section": "2.2 Regression",
    "text": "2.2 Regression\n\nRPythonJulia\n\n\n\nlibrary(e1071)\nX = scale(iris[,2:4])\nY = iris[,1]\n\nsv = svm(X, Y) \nsummary(sv)\n\n\nCall:\nsvm.default(x = X, y = Y)\n\n\nParameters:\n   SVM-Type:  eps-regression \n SVM-Kernel:  radial \n       cost:  1 \n      gamma:  0.3333333 \n    epsilon:  0.1 \n\n\nNumber of Support Vectors:  124\n\n\nMake predictions (class probabilities):\n\nhead(predict(sv, newdata = X), n = 3)\n\n       1        2        3 \n5.042085 4.711768 4.836291 \n\n\n\n\n\nfrom sklearn import svm\nfrom sklearn import datasets\nfrom sklearn.preprocessing import scale\niris = datasets.load_iris()\ndata = iris.data\nX = scale(data[:,1:4])\nY = data[:,0]\n\nmodel = svm.SVR().fit(X, Y)\n\n# Make predictions:\n\nmodel.predict(X)[0:10]\n\narray([5.03583855, 4.69496586, 4.81438855, 4.77951854, 5.10018373,\n       5.29981857, 4.97308737, 4.98199033, 4.63701656, 4.78431078])\n\n\n\n\n\nimport StatsBase;\nusing MLJ;\nSVM_regressor =  @load NuSVR pkg=LIBSVM;\nusing RDatasets;\nusing DataFrames;\n\n\niris = dataset(\"datasets\", \"iris\");\nX = mapcols(StatsBase.zscore, iris[:, 2:4]);\nY = iris[:, 1];\n\nModel:\n\nmodel = fit!(machine(SVM_regressor(), X, Y))\n\ntrained Machine; caches model-specific representations of data\n  model: NuSVR(kernel = RadialBasis, …)\n  args: \n    1:  Source @758 ⏎ Table{AbstractVector{Continuous}}\n    2:  Source @893 ⏎ AbstractVector{Continuous}\n\n\nPredictions:\n\nMLJ.predict(model, X)[1:5]\n\n5-element Vector{Float64}:\n 5.058471741834634\n 4.6717512552719604\n 4.799641470830148\n 4.75734816087994\n 5.133728219775252\n\n\n\n\n\n\n\n\n\nBlaom, Anthony, Franz Kiraly, Thibaut Lienart, and Sebastian Vollmer. 2019. Alan-Turing-Institute/MLJ.jl: V0.5.3 (version v0.5.3). Zenodo. https://doi.org/10.5281/zenodo.3541506.\n\n\nMeyer, David, Evgenia Dimitriadou, Kurt Hornik, Andreas Weingessel, and Friedrich Leisch. 2022. E1071: Misc Functions of the Department of Statistics, Probability Theory Group (Formerly: E1071), TU Wien. https://CRAN.R-project.org/package=e1071.\n\n\nPedregosa, F., G. Varoquaux, A. Gramfort, V. Michel, B. Thirion, O. Grisel, M. Blondel, et al. 2011. “Scikit-Learn: Machine Learning in Python.” Journal of Machine Learning Research 12: 2825–30."
  },
  {
    "objectID": "knn.html",
    "href": "knn.html",
    "title": "3  k-nearest-neighbor",
    "section": "",
    "text": "The k-nearest-neighbor algorithm doesn’t really learn from the data, predictions for new observations are made based on the class affiliation (or response value) of the nearest neighbors, e.g. by majority voting or averaging. The nearest neighbors are found by calculating the distance of the new observation to all observations in the train dataset.\nIn the following we use the ‘kknn’ package (Schliep and Hechenbichler (2016)) (Python: ‘scikit-learn’ (Pedregosa et al. (2011)), Julia: ‘MLJ’ (Blaom et al. (2019))). Different to other ML packages we can provide here already the test dataset in the fit function."
  },
  {
    "objectID": "knn.html#classification",
    "href": "knn.html#classification",
    "title": "3  k-nearest-neighbor",
    "section": "3.1 Classification",
    "text": "3.1 Classification\n\nRPythonJulia\n\n\n\nlibrary(kknn)\nX = scale(iris[,1:4])\nY = iris[,5,drop=FALSE]\ndata = cbind(Y, X)\n\nknn = kknn(Species~., train = data, test = data) \n\nMake predictions (class probabilities):\n\nhead(knn$prob, n = 3)\n\n     setosa versicolor virginica\n[1,]      1          0         0\n[2,]      1          0         0\n[3,]      1          0         0\n\n\n\n\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import datasets\nfrom sklearn.preprocessing import scale\niris = datasets.load_iris()\nX = scale(iris.data)\nY = iris.target\n\nmodel = KNeighborsClassifier().fit(X, Y)\n\n# Make predictions:\n\nmodel.predict_proba(X)[0:10,:]\n\narray([[1., 0., 0.],\n       [1., 0., 0.],\n       [1., 0., 0.],\n       [1., 0., 0.],\n       [1., 0., 0.],\n       [1., 0., 0.],\n       [1., 0., 0.],\n       [1., 0., 0.],\n       [1., 0., 0.],\n       [1., 0., 0.]])\n\n\n\n\n\nimport StatsBase;\nusing MLJ;\nkNN_classifier = @load KNNClassifier pkg=NearestNeighborModels;\nusing RDatasets;\nusing StatsBase;\nusing DataFrames;\n\n\niris = dataset(\"datasets\", \"iris\");\nX = mapcols(StatsBase.zscore, iris[:, 1:4]);\nY = iris[:, 5];\n\nModels:\n\nmodel = fit!(machine(kNN_classifier(), X, Y))\n\ntrained Machine; caches model-specific representations of data\n  model: KNNClassifier(K = 5, …)\n  args: \n    1:  Source @749 ⏎ Table{AbstractVector{Continuous}}\n    2:  Source @020 ⏎ AbstractVector{Multiclass{3}}\n\n\nPredictions:\n\nMLJ.predict(model, X)[1:5]\n\n5-element CategoricalDistributions.UnivariateFiniteVector{Multiclass{3}, String, UInt8, Float64}:\n UnivariateFinite{Multiclass{3}}(setosa=>1.0, versicolor=>0.0, virginica=>0.0)\n UnivariateFinite{Multiclass{3}}(setosa=>1.0, versicolor=>0.0, virginica=>0.0)\n UnivariateFinite{Multiclass{3}}(setosa=>1.0, versicolor=>0.0, virginica=>0.0)\n UnivariateFinite{Multiclass{3}}(setosa=>1.0, versicolor=>0.0, virginica=>0.0)\n UnivariateFinite{Multiclass{3}}(setosa=>1.0, versicolor=>0.0, virginica=>0.0)"
  },
  {
    "objectID": "knn.html#regression",
    "href": "knn.html#regression",
    "title": "3  k-nearest-neighbor",
    "section": "3.2 Regression",
    "text": "3.2 Regression\n\nRPythonJulia\n\n\n\nlibrary(e1071)\nX = scale(iris[,2:4])\ndata = cbind(iris[,1,drop=FALSE], X)\n\nknn = kknn(Sepal.Length~., train = data, test = data) \n\nMake predictions (class probabilities):\n\nhead(predict(knn), n = 3)\n\n[1] 5.188492 4.739986 4.685332\n\n\n\n\n\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn import datasets\nfrom sklearn.preprocessing import scale\niris = datasets.load_iris()\ndata = iris.data\nX = scale(data[:,1:4])\nY = data[:,0]\n\nmodel = KNeighborsRegressor().fit(X, Y)\n\n# Make predictions:\n\nmodel.predict(X)[0:10]\n\narray([5.18, 4.78, 4.68, 4.76, 4.98, 5.34, 5.06, 5.1 , 4.7 , 4.8 ])\n\n\n\n\n\nimport StatsBase;\nusing MLJ;\nkNN_regressor =  @load KNNRegressor pkg=NearestNeighborModels;\nusing RDatasets;\nusing DataFrames;\n\n\niris = dataset(\"datasets\", \"iris\");\nX = mapcols(StatsBase.zscore, iris[:, 2:4]);\nY = iris[:, 1];\n\nModel:\n\nmodel = fit!(machine(kNN_regressor(), X, Y))\n\ntrained Machine; caches model-specific representations of data\n  model: KNNRegressor(K = 5, …)\n  args: \n    1:  Source @797 ⏎ Table{AbstractVector{Continuous}}\n    2:  Source @974 ⏎ AbstractVector{Continuous}\n\n\nPredictions:\n\nMLJ.predict(model, X)[1:5]\n\n5-element Vector{Float64}:\n 5.18\n 4.779999999999999\n 4.68\n 4.82\n 5.0200000000000005\n\n\n\n\n\n\n\n\n\nBlaom, Anthony, Franz Kiraly, Thibaut Lienart, and Sebastian Vollmer. 2019. Alan-Turing-Institute/MLJ.jl: V0.5.3 (version v0.5.3). Zenodo. https://doi.org/10.5281/zenodo.3541506.\n\n\nPedregosa, F., G. Varoquaux, A. Gramfort, V. Michel, B. Thirion, O. Grisel, M. Blondel, et al. 2011. “Scikit-Learn: Machine Learning in Python.” Journal of Machine Learning Research 12: 2825–30.\n\n\nSchliep, Klaus, and Klaus Hechenbichler. 2016. Kknn: Weighted k-Nearest Neighbors. https://CRAN.R-project.org/package=kknn."
  },
  {
    "objectID": "rf.html",
    "href": "rf.html",
    "title": "4  Random forest",
    "section": "",
    "text": "The random forest (RF) algorithm is probably one of the most famous ML algorithms, and not without reason. Compared to other well performing algorithms, the RF algorithm has only a few hyper-parameters and because of the bagging and the random sampling of available variables in for the node splits, it has a well working internal complexity adaption.\nIn the following, we use the ‘ranger’ package (Wright and Ziegler (2017)) (Python: ‘scikit-learn’ (Pedregosa et al. (2011)), Julia: ‘MLJ’ (Blaom et al. (2019)))."
  },
  {
    "objectID": "rf.html#classification",
    "href": "rf.html#classification",
    "title": "4  Random forest",
    "section": "4.1 Classification",
    "text": "4.1 Classification\n\nRPythonJulia\n\n\n\nlibrary(ranger)\nX = iris[,1:4]\nY = iris[,5,drop=FALSE]\ndata = cbind(Y, X)\n\nrf = ranger(Species~., data = data, probability = TRUE, importance = \"impurity\")\n\nShow feature importances:\n\nimportance(rf)\n\nSepal.Length  Sepal.Width Petal.Length  Petal.Width \n    9.067816     1.358848    41.845718    43.340283 \n\n\nMake predictions (class probabilities):\n\nhead(predict(rf, data = data)$predictions, n = 3)\n\n        setosa   versicolor    virginica\n[1,] 1.0000000 0.0000000000 0.0000000000\n[2,] 0.9995556 0.0002222222 0.0002222222\n[3,] 1.0000000 0.0000000000 0.0000000000\n\n\n\n\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import datasets\nfrom sklearn.preprocessing import scale\niris = datasets.load_iris()\nX = scale(iris.data)\nY = iris.target\n\nmodel = RandomForestClassifier().fit(X, Y)\n\nFeature importance\n\nprint(model.feature_importances_)\n\n[0.1047826  0.02722545 0.43783582 0.43015613]\n\n\nMake predictions:\n\nmodel.predict_proba(X)[0:10,:]\n\narray([[1., 0., 0.],\n       [1., 0., 0.],\n       [1., 0., 0.],\n       [1., 0., 0.],\n       [1., 0., 0.],\n       [1., 0., 0.],\n       [1., 0., 0.],\n       [1., 0., 0.],\n       [1., 0., 0.],\n       [1., 0., 0.]])\n\n\n\n\n\nimport StatsBase;\nusing MLJ;\nRF_classifier = @load RandomForestClassifier pkg=DecisionTree;\nusing RDatasets;\nusing StatsBase;\nusing DataFrames;\n\n\niris = dataset(\"datasets\", \"iris\");\nX = mapcols(StatsBase.zscore, iris[:, 1:4]);\nY = iris[:, 5];\n\nModels:\n\nmodel = fit!(machine(RF_classifier(), X, Y))\n\ntrained Machine; caches model-specific representations of data\n  model: RandomForestClassifier(max_depth = -1, …)\n  args: \n    1:  Source @613 ⏎ Table{AbstractVector{Continuous}}\n    2:  Source @784 ⏎ AbstractVector{Multiclass{3}}\n\n\nFeature importance:\n\nfeature_importances(model)\n\n4-element Vector{Pair{Symbol, Float64}}:\n :PetalLength => 0.51551371534272\n  :PetalWidth => 0.3981451261378913\n :SepalLength => 0.06998182233047624\n  :SepalWidth => 0.01635933618891258\n\n\nPredictions:\n\nMLJ.predict(model, X)[1:5]\n\n5-element CategoricalDistributions.UnivariateFiniteVector{Multiclass{3}, String, UInt8, Float64}:\n UnivariateFinite{Multiclass{3}}(setosa=>1.0, versicolor=>0.0, virginica=>0.0)\n UnivariateFinite{Multiclass{3}}(setosa=>1.0, versicolor=>0.0, virginica=>0.0)\n UnivariateFinite{Multiclass{3}}(setosa=>1.0, versicolor=>0.0, virginica=>0.0)\n UnivariateFinite{Multiclass{3}}(setosa=>1.0, versicolor=>0.0, virginica=>0.0)\n UnivariateFinite{Multiclass{3}}(setosa=>1.0, versicolor=>0.0, virginica=>0.0)"
  },
  {
    "objectID": "rf.html#regression",
    "href": "rf.html#regression",
    "title": "4  Random forest",
    "section": "4.2 Regression",
    "text": "4.2 Regression\n\nRPythonJulia\n\n\n\nlibrary(ranger)\nX = iris[,2:4]\ndata = cbind(iris[,1,drop=FALSE], X)\n\nrf = ranger(Sepal.Length~., data = data, importance = \"impurity\")\n\nShow feature importances:\n\nimportance(rf)\n\n Sepal.Width Petal.Length  Petal.Width \n    11.72733     46.86181     37.13289 \n\n\nMake predictions (class probabilities):\n\nhead(predict(rf, data = data)$predictions, n = 3)\n\n[1] 5.104768 4.774441 4.649346\n\n\n\n\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn import datasets\nfrom sklearn.preprocessing import scale\niris = datasets.load_iris()\ndata = iris.data\nX = scale(data[:,1:4])\nY = data[:,0]\n\nmodel = RandomForestRegressor().fit(X, Y)\n\nFeature importance:\n\nprint(model.feature_importances_)\n\n[0.07991512 0.85830207 0.06178281]\n\n\nMake predictions:\n\nmodel.predict(X)[0:10]\n\narray([5.106     , 4.8205    , 4.57298571, 4.76945   , 5.017     ,\n       5.429     , 4.80283333, 5.06201667, 4.5855    , 4.856     ])\n\n\n\n\n\nimport StatsBase;\nusing MLJ;\nRF_regressor = @load RandomForestRegressor pkg=DecisionTree;\nusing RDatasets;\nusing DataFrames;\n\n\niris = dataset(\"datasets\", \"iris\");\nX = mapcols(StatsBase.zscore, iris[:, 2:4]);\nY = iris[:, 1];\n\nModel:\n\nmodel = fit!(machine(RF_regressor(), X, Y))\n\ntrained Machine; caches model-specific representations of data\n  model: RandomForestRegressor(max_depth = -1, …)\n  args: \n    1:  Source @316 ⏎ Table{AbstractVector{Continuous}}\n    2:  Source @129 ⏎ AbstractVector{Continuous}\n\n\nFeature importance:\n\nfeature_importances(model)\n\n3-element Vector{Pair{Symbol, Float64}}:\n :PetalLength => 0.6626304609310221\n  :PetalWidth => 0.23647943010293143\n  :SepalWidth => 0.10089010896604662\n\n\nPredictions:\n\nMLJ.predict(model, X)[1:5]\n\n5-element Vector{Float64}:\n 5.1000000000000005\n 4.659999999999999\n 4.62\n 4.720000000000001\n 5.0600000000000005\n\n\n\n\n\n\n\n\n\nBlaom, Anthony, Franz Kiraly, Thibaut Lienart, and Sebastian Vollmer. 2019. Alan-Turing-Institute/MLJ.jl: V0.5.3 (version v0.5.3). Zenodo. https://doi.org/10.5281/zenodo.3541506.\n\n\nPedregosa, F., G. Varoquaux, A. Gramfort, V. Michel, B. Thirion, O. Grisel, M. Blondel, et al. 2011. “Scikit-Learn: Machine Learning in Python.” Journal of Machine Learning Research 12: 2825–30.\n\n\nWright, Marvin N., and Andreas Ziegler. 2017. “ranger: A Fast Implementation of Random Forests for High Dimensional Data in C++ and R.” Journal of Statistical Software 77 (1): 1–17. https://doi.org/10.18637/jss.v077.i01."
  },
  {
    "objectID": "brt.html",
    "href": "brt.html",
    "title": "5  Boosted gradient trees",
    "section": "",
    "text": "Boosted gradient machines achieve currently state-of-the-art performance for structured (tabular) data which makes them probably one of the most important algorithms for E&E where structured data dominates the field.\nIn the following, we use the ‘xgboost’ package (Chen et al. (2022)) (Python: ‘xgboost’ (Chen et al. (2022)), Julia: ‘MLJ’ (Blaom et al. (2019)))"
  },
  {
    "objectID": "brt.html#classification",
    "href": "brt.html#classification",
    "title": "5  Boosted gradient trees",
    "section": "5.1 Classification",
    "text": "5.1 Classification\n\nRPythonJulia\n\n\n\nlibrary(xgboost)\nX = as.matrix(iris[,1:4])\nY = as.integer(iris[,5]) - 1 # classes must be integers starting from 0\n\nxgdata = xgb.DMatrix(X, label = Y)\n\n# nrounds = number of trees in the ensemble\nbrt = xgboost(data = xgdata, \n              objective=\"multi:softprob\", \n              nrounds = 50, \n              num_class = 3,\n              verbose = 0)\n\nShow feature importances:\n\nxgb.importance(model = brt)\n\n        Feature        Gain      Cover Frequency\n1: Petal.Length 0.671879438 0.57441039 0.3792049\n2:  Petal.Width 0.311535837 0.29261084 0.3088685\n3:  Sepal.Width 0.010177107 0.04910115 0.1162080\n4: Sepal.Length 0.006407618 0.08387763 0.1957187\n\n\nMake predictions (class probabilities):\n\nhead(matrix(predict(brt, newdata = xgb.DMatrix(X)), ncol =3), n = 3)\n\n            [,1]        [,2]        [,3]\n[1,] 0.995287061 0.002195822 0.001027058\n[2,] 0.003323558 0.995396435 0.001592265\n[3,] 0.001389398 0.002407764 0.997380674\n\n\n\n\n\nimport xgboost as xgb\nfrom sklearn import datasets\nfrom sklearn.preprocessing import scale\niris = datasets.load_iris()\nX = scale(iris.data)\nY = iris.target\n\n# Parameters:\nparam = {\n  'max_depth':2, \n  'eta':1, \n  'objective':'multi:softmax' }\nnum_round = 50\n\nmodel = xgb.XGBClassifier(param, num_round, verbosity = 0).fit(X, Y)\n\n/home/max/miniconda3/envs/r-sjsdm/lib/python3.9/site-packages/xgboost/core.py:568: FutureWarning: Pass `objective, use_label_encoder` as keyword args.  Passing these as positional arguments will be considered as error in future releases.\n  warnings.warn(\n\n\nFeature importance\n\nmodel.feature_importances_\n\narray([0.00959796, 0.01645038, 0.6765859 , 0.29736578], dtype=float32)\n\n\nMake predictions:\n\nmodel.predict_proba(X)[0:10,:]\n\narray([[9.9680281e-01, 2.3831066e-03, 8.1413286e-04],\n       [9.9636227e-01, 2.3820533e-03, 1.2557388e-03],\n       [9.9680281e-01, 2.3831066e-03, 8.1413286e-04],\n       [9.9679452e-01, 2.3830866e-03, 8.2237815e-04],\n       [9.9680281e-01, 2.3831066e-03, 8.1413286e-04],\n       [9.9680281e-01, 2.3831066e-03, 8.1413286e-04],\n       [9.9680281e-01, 2.3831066e-03, 8.1413286e-04],\n       [9.9680281e-01, 2.3831066e-03, 8.1413286e-04],\n       [9.9636227e-01, 2.3820533e-03, 1.2557388e-03],\n       [9.9679452e-01, 2.3830866e-03, 8.2237815e-04]], dtype=float32)\n\n\n\n\n\nimport StatsBase;\nusing MLJ;\nBRT_classifier = @load XGBoostClassifier pkg=XGBoost;\nusing RDatasets;\nusing StatsBase;\nusing DataFrames;\n\n\niris = dataset(\"datasets\", \"iris\");\nX = mapcols(StatsBase.zscore, iris[:, 1:4]);\nY = iris[:, 5];\n\nModels:\n\nmodel = fit!(machine(BRT_classifier(), X, Y))\n\ntrained Machine; caches model-specific representations of data\n  model: XGBoostClassifier(num_round = 100, …)\n  args: \n    1:  Source @086 ⏎ Table{AbstractVector{Continuous}}\n    2:  Source @683 ⏎ AbstractVector{Multiclass{3}}\n\n\nPredictions:\n\nMLJ.predict(model, X)[1:5]\n\n5-element CategoricalDistributions.UnivariateFiniteVector{Multiclass{3}, String, UInt8, Float32}:\n UnivariateFinite{Multiclass{3}}(setosa=>0.997, versicolor=>0.00238, virginica=>0.000814)\n UnivariateFinite{Multiclass{3}}(setosa=>0.996, versicolor=>0.00238, virginica=>0.00126)\n UnivariateFinite{Multiclass{3}}(setosa=>0.997, versicolor=>0.00238, virginica=>0.000814)\n UnivariateFinite{Multiclass{3}}(setosa=>0.997, versicolor=>0.00238, virginica=>0.000822)\n UnivariateFinite{Multiclass{3}}(setosa=>0.997, versicolor=>0.00238, virginica=>0.000814)"
  },
  {
    "objectID": "brt.html#regression",
    "href": "brt.html#regression",
    "title": "5  Boosted gradient trees",
    "section": "5.2 Regression",
    "text": "5.2 Regression\n\nRPythonJulia\n\n\n\nlibrary(xgboost)\nX = as.matrix(iris[,2:4])\nY = iris[,1]\n\nxgdata = xgb.DMatrix(X, label = Y)\n\n# nrounds = number of trees in the ensemble\nbrt = xgboost(data = xgdata, \n              objective=\"reg:squarederror\", \n              nrounds = 50, \n              verbose = 0)\n\nShow feature importances:\n\nxgb.importance(model = brt)\n\n        Feature       Gain     Cover Frequency\n1: Petal.Length 0.86781219 0.4789538 0.3789062\n2:  Petal.Width 0.06987880 0.2128402 0.2626953\n3:  Sepal.Width 0.06230901 0.3082060 0.3583984\n\n\nMake predictions:\n\nhead(predict(brt, newdata = xgb.DMatrix(X), n = 3))\n\n[15:06:18] WARNING: amalgamation/../src/c_api/c_api.cc:785: `ntree_limit` is deprecated, use `iteration_range` instead.\n\n\n[1] 3.506606 3.506606 3.506606 3.506606 3.506606 3.506606\n\n\n\n\n\nimport xgboost as xgb\nfrom sklearn import datasets\nfrom sklearn.preprocessing import scale\niris = datasets.load_iris()\ndata = iris.data\nX = scale(data[:,1:4])\nY = data[:,0]\n\n# Parameters:\nmodel = xgb.XGBRegressor(\n  objective = 'reg:squarederror',\n  max_depth = 2,  \n  n_estimators = 50, \n  verbosity = 0).fit(X, Y)\n\nFeature importance:\n\nprint(model.feature_importances_)\n\n[0.08471056 0.835755   0.07953447]\n\n\nMake predictions:\n\nmodel.predict(X)[0:10]\n\narray([5.0407157, 4.6844926, 4.711238 , 4.917956 , 5.0407157, 5.450946 ,\n       4.928966 , 4.986462 , 4.6750975, 4.917956 ], dtype=float32)\n\n\n\n\n\nimport StatsBase;\nusing MLJ;\nBRT_regressor =  @load XGBoostRegressor pkg=XGBoost;\nusing RDatasets;\nusing DataFrames;\n\n\niris = dataset(\"datasets\", \"iris\");\nX = mapcols(StatsBase.zscore, iris[:, 2:4]);\nY = iris[:, 1];\n\nModel:\n\nmodel = fit!(machine(BRT_regressor(), X, Y))\n\ntrained Machine; caches model-specific representations of data\n  model: XGBoostRegressor(num_round = 100, …)\n  args: \n    1:  Source @893 ⏎ Table{AbstractVector{Continuous}}\n    2:  Source @522 ⏎ AbstractVector{Continuous}\n\n\nPredictions:\n\nMLJ.predict(model, X)[1:5]\n\n5-element Vector{Float32}:\n 5.1509466\n 4.8569074\n 4.551141\n 4.7587333\n 4.999504\n\n\n\n\n\n\n\n\n\nBlaom, Anthony, Franz Kiraly, Thibaut Lienart, and Sebastian Vollmer. 2019. Alan-Turing-Institute/MLJ.jl: V0.5.3 (version v0.5.3). Zenodo. https://doi.org/10.5281/zenodo.3541506.\n\n\nChen, Tianqi, Tong He, Michael Benesty, Vadim Khotilovich, Yuan Tang, Hyunsu Cho, Kailong Chen, et al. 2022. Xgboost: Extreme Gradient Boosting. https://CRAN.R-project.org/package=xgboost."
  },
  {
    "objectID": "dnn.html",
    "href": "dnn.html",
    "title": "6  Deep neural networks",
    "section": "",
    "text": "Deep neural networks, or more precisely here fully connected neural networks, can be flexibly built which makes their application more challenging than other ML algorithms.\nIn the following, we use the ‘keras’ (Allaire and Chollet (2022); Chollet et al. (2015)) (Python: ‘keras’ (Chollet et al. (2015)); Julia: ‘Flux’ (Innes et al. (2018))) package which is a higher level API on the python ‘tensorflow’ framework (Abadi et al. (2016))."
  },
  {
    "objectID": "dnn.html#classification",
    "href": "dnn.html#classification",
    "title": "6  Deep neural networks",
    "section": "6.1 Classification",
    "text": "6.1 Classification\n\nRPythonJulia\n\n\n\nlibrary(keras)\nX = scale(as.matrix(iris[,1:4]))\nY = as.integer(iris$Species)\n# We need to one hot encode our response classes\nYT = k_one_hot(Y-1L, num_classes = 3)\n\nDNN = keras_model_sequential() %>% \n  # first hidden layer\n  layer_dense(input_shape = ncol(X), \n              units = 10, \n              activation = \"relu\") %>% \n  # second hidden layer with regularization\n  layer_dense(units = 20, \n              activation = \"relu\",\n              kernel_regularizer = regularizer_l1()) %>% \n  # output layer, 3 output neurons for our three classes\n  # and softmax activation to get quasi probabilities \n  # that sum up to 1 for each observation\n  layer_dense(units = 3, \n              activation = \"softmax\")\n\n# print architecture\nsummary(DNN)\n\nModel: \"sequential\"\n________________________________________________________________________________\n Layer (type)                       Output Shape                    Param #     \n================================================================================\n dense_2 (Dense)                    (None, 10)                      50          \n dense_1 (Dense)                    (None, 20)                      220         \n dense (Dense)                      (None, 3)                       63          \n================================================================================\nTotal params: 333\nTrainable params: 333\nNon-trainable params: 0\n________________________________________________________________________________\n\n# add loss function and optimizer\nDNN %>% \n  compile(loss = loss_categorical_crossentropy,\n          optimizer = optimizer_adamax(0.01))\n\n# train model\nDNN %>% \n  fit(X, YT, epochs = 50, verbose = 0)\n\nMake predictions (class probabilities):\n\nhead(predict(DNN, X), n = 3)\n\n          [,1]        [,2]         [,3]\n[1,] 0.9962465 0.003589567 0.0001640228\n[2,] 0.9848880 0.014879720 0.0002324550\n[3,] 0.9970835 0.002787639 0.0001286939\n\n\n\n\n\nfrom tensorflow import keras\nfrom tensorflow.keras.layers import *\nfrom sklearn import datasets\nfrom sklearn.preprocessing import scale\niris = datasets.load_iris()\nX = scale(iris.data)\nY = iris.target\n\n# We need to one hot encode our response classes\nYT = keras.utils.to_categorical(Y, num_classes = 3)\n\nDNN = keras.Sequential()\n  # first hidden layer\nDNN.add(Dense(\n  input_shape=[X.shape[1]], \n  units = 10, \n  activation = \"relu\")) \n  # second hidden layer with regularization\nDNN.add(Dense(\n  units = 20, \n  activation = \"relu\",\n  kernel_regularizer = keras.regularizers.l1()))\n  # output layer, 3 output neurons for our three classes\n  # and softmax activation to get quasi probabilities \n  # that sum up to 1 for each observation\nDNN.add(Dense(\n  units = 3, \n  activation = \"softmax\"))\n\n# print architecture\nDNN.summary()\n\n# add loss function and optimizer\n\nModel: \"sequential_1\"\n_________________________________________________________________\n Layer (type)                Output Shape              Param #   \n=================================================================\n dense_3 (Dense)             (None, 10)                50        \n                                                                 \n dense_4 (Dense)             (None, 20)                220       \n                                                                 \n dense_5 (Dense)             (None, 3)                 63        \n                                                                 \n=================================================================\nTotal params: 333\nTrainable params: 333\nNon-trainable params: 0\n_________________________________________________________________\n\nDNN.compile(loss = keras.losses.categorical_crossentropy,\n            optimizer = keras.optimizers.Adamax(0.01))\n\n# train model\nDNN.fit(X, YT, epochs = 50, verbose = 0)\n\n<keras.callbacks.History object at 0x7f09a7452460>\n\n\nMake predictions:\n\nDNN.predict(X)[0:10,:]\n\n\n1/5 [=====>........................] - ETA: 0s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n5/5 [==============================] - 0s 940us/step\narray([[9.94787872e-01, 4.17001359e-03, 1.04207790e-03],\n       [9.82984900e-01, 1.54780671e-02, 1.53702230e-03],\n       [9.96189654e-01, 3.01337033e-03, 7.96947046e-04],\n       [9.94444370e-01, 4.62495722e-03, 9.30633105e-04],\n       [9.97212470e-01, 2.00825068e-03, 7.79209717e-04],\n       [9.94305611e-01, 3.97154968e-03, 1.72281812e-03],\n       [9.98162746e-01, 1.16384670e-03, 6.73333008e-04],\n       [9.93549705e-01, 5.33071114e-03, 1.11946405e-03],\n       [9.94785070e-01, 4.37794533e-03, 8.37010215e-04],\n       [9.86207247e-01, 1.25755025e-02, 1.21731847e-03]], dtype=float32)\n\n\n\n\n\nimport StatsBase\nusing RDatasets\nusing StatsBase\nusing DataFrames\nimport MLJBase.int\nusing Flux, Statistics\nusing Flux.Data: DataLoader\nusing Flux: onehotbatch, onecold, @epochs\nusing Flux.Losses: logitcrossentropy\n\nData preparation:\n\niris = dataset(\"datasets\", \"iris\");\nX = transpose(Matrix(mapcols(StatsBase.zscore, iris[:, 1:4])));\nY = int(iris[:, 5], type = Int);\nclasses = sort(unique(Y));\nYT = onehotbatch(Y, classes);\ndata_loader = DataLoader((X, YT), batchsize=10, shuffle=true);\n\nCreate model (similar to Keras):\n\nmodel = Chain(\n  Dense(4, 20, relu),\n  Dense(20, 20, relu),\n  Dense(20, 3)\n)\n\nChain(\n  Dense(4 => 20, relu),                 # 100 parameters\n  Dense(20 => 20, relu),                # 420 parameters\n  Dense(20 => 3),                       # 63 parameters\n)                   # Total: 6 arrays, 583 parameters, 2.652 KiB.\n\n\nTrain/optimize Model:\n\nparameters = Flux.params(model);\noptimizer = ADAM(0.01);\n\n# Help functions\nloss(x, y) = logitcrossentropy(model(x), y);\n\nget_loss() = @show sum(logitcrossentropy(model(X), YT));\n\n## Training\nfor epoch in 1:20\n  Flux.train!(loss, parameters, data_loader, optimizer, cb = Flux.throttle(get_loss, 5))\nend\n\nsum(logitcrossentropy(model(X), YT)) = 0.9968472881302792\nsum(logitcrossentropy(model(X), YT)) = 0.407915665968644\nsum(logitcrossentropy(model(X), YT)) = 0.25693295877600025\nsum(logitcrossentropy(model(X), YT)) = 0.1766998314541965\nsum(logitcrossentropy(model(X), YT)) = 0.11782307504167162\nsum(logitcrossentropy(model(X), YT)) = 0.08904269600509418\nsum(logitcrossentropy(model(X), YT)) = 0.07343147452012645\nsum(logitcrossentropy(model(X), YT)) = 0.06219033144462982\nsum(logitcrossentropy(model(X), YT)) = 0.07896333188631052\nsum(logitcrossentropy(model(X), YT)) = 0.061009181350311414\nsum(logitcrossentropy(model(X), YT)) = 0.05415327509114975\nsum(logitcrossentropy(model(X), YT)) = 0.06574636561214808\nsum(logitcrossentropy(model(X), YT)) = 0.04392088669909506\nsum(logitcrossentropy(model(X), YT)) = 0.04204886024035571\nsum(logitcrossentropy(model(X), YT)) = 0.050127564760964735\nsum(logitcrossentropy(model(X), YT)) = 0.05248851799584753\nsum(logitcrossentropy(model(X), YT)) = 0.03977422400493945\nsum(logitcrossentropy(model(X), YT)) = 0.04544570242797193\nsum(logitcrossentropy(model(X), YT)) = 0.060201900874104756\nsum(logitcrossentropy(model(X), YT)) = 0.0396585422150025\n\n\nPredictions:\n\ntranspose(softmax(model(X)))[1:5,:]\n\n5×3 Matrix{Float64}:\n 0.999989  1.09298e-5  1.52312e-11\n 0.999916  8.3711e-5   1.14199e-9\n 0.999995  5.31299e-6  7.13309e-11\n 0.999993  7.32351e-6  2.90119e-10\n 0.999997  2.72559e-6  4.39277e-12"
  },
  {
    "objectID": "dnn.html#regression",
    "href": "dnn.html#regression",
    "title": "6  Deep neural networks",
    "section": "6.2 Regression",
    "text": "6.2 Regression\n\nRPythonJulia\n\n\n\nlibrary(keras)\nX = scale(as.matrix(iris[,2:4]))\nY = as.matrix(iris[,1,drop=FALSE])\n\nDNN = keras_model_sequential() %>% \n  # first hidden layer\n  layer_dense(input_shape = ncol(X), \n              units = 10, \n              activation = \"relu\") %>% \n  # second hidden layer with regularization\n  layer_dense(units = 20, \n              activation = \"relu\",\n              kernel_regularizer = regularizer_l1()) %>% \n  # output layer, one output neuron for one response\n  # and no activation function\n  layer_dense(units = 1)\n\n# print architecture\nsummary(DNN)\n\nModel: \"sequential_2\"\n________________________________________________________________________________\n Layer (type)                       Output Shape                    Param #     \n================================================================================\n dense_8 (Dense)                    (None, 10)                      40          \n dense_7 (Dense)                    (None, 20)                      220         \n dense_6 (Dense)                    (None, 1)                       21          \n================================================================================\nTotal params: 281\nTrainable params: 281\nNon-trainable params: 0\n________________________________________________________________________________\n\n# add loss function and optimizer\nDNN %>% \n  compile(loss = loss_mean_squared_error,\n          optimizer = optimizer_adamax(0.01))\n\n# train model\nDNN %>% \n  fit(X, YT, epochs = 50, verbose = 0)\n\nMake predictions:\n\nhead(predict(DNN, X), n = 3)\n\n          [,1]\n[1,] 0.3252823\n[2,] 0.3261368\n[3,] 0.3257285\n\n\n\n\n\nfrom tensorflow import keras\nfrom tensorflow.keras.layers import *\nfrom sklearn import datasets\nfrom sklearn.preprocessing import scale\niris = datasets.load_iris()\ndata = iris.data\nX = scale(data[:,1:4])\nY = data[:,0]\n\nDNN = keras.Sequential()\n  # first hidden layer\nDNN.add(Dense(\n  input_shape=[X.shape[1]], \n  units = 10, \n  activation = \"relu\")) \n  # second hidden layer with regularization\nDNN.add(Dense(\n  units = 20, \n  activation = \"relu\",\n  kernel_regularizer = keras.regularizers.l1()))\n  # output layer, 3 output neurons for our three classes\n  # and softmax activation to get quasi probabilities \n  # that sum up to 1 for each observation\nDNN.add(Dense(\n  units = 1, \n  activation = None))\n\n# print architecture\nDNN.summary()\n\n# add loss function and optimizer\n\nModel: \"sequential_3\"\n_________________________________________________________________\n Layer (type)                Output Shape              Param #   \n=================================================================\n dense_9 (Dense)             (None, 10)                40        \n                                                                 \n dense_10 (Dense)            (None, 20)                220       \n                                                                 \n dense_11 (Dense)            (None, 1)                 21        \n                                                                 \n=================================================================\nTotal params: 281\nTrainable params: 281\nNon-trainable params: 0\n_________________________________________________________________\n\nDNN.compile(loss = keras.losses.mean_squared_error,\n            optimizer = keras.optimizers.Adamax(0.01))\n\n# train model\nDNN.fit(X, Y, epochs = 50, verbose = 0)\n\n<keras.callbacks.History object at 0x7f0873635d30>\n\n\nMake predictions:\n\nDNN.predict(X)[0:10]\n\n\n1/5 [=====>........................] - ETA: 0s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n5/5 [==============================] - 0s 639us/step\narray([[5.1530886],\n       [4.635344 ],\n       [4.844628 ],\n       [4.718408 ],\n       [5.2458243],\n       [5.3749986],\n       [5.0117435],\n       [5.046633 ],\n       [4.583274 ],\n       [4.761703 ]], dtype=float32)\n\n\n\n\n\nimport StatsBase\nusing RDatasets\nusing StatsBase\nusing DataFrames\nimport MLJBase.int\nusing Flux, Statistics\nusing Flux.Data: DataLoader\nusing Flux: onehotbatch, onecold, @epochs\nusing Flux.Losses: mse\n\nData preparation:\n\niris = dataset(\"datasets\", \"iris\");\nX = transpose(Matrix(mapcols(StatsBase.zscore, iris[:, 2:4])));\nYT = iris[:, 1];\nYT = reshape(YT, 1, length(YT));\n\ndata_loader = DataLoader((X, YT), batchsize=10, shuffle=true);\n\nCreate model (similar to Keras):\n\nmodel = Chain(\n  Dense(3, 20, relu),\n  Dense(20, 20, relu),\n  Dense(20, 1)\n)\n\nChain(\n  Dense(3 => 20, relu),                 # 80 parameters\n  Dense(20 => 20, relu),                # 420 parameters\n  Dense(20 => 1),                       # 21 parameters\n)                   # Total: 6 arrays, 521 parameters, 2.410 KiB.\n\n\nTrain/optimize Model:\n\nparameters = Flux.params(model);\noptimizer = ADAM(0.01);\n\n# Help functions\nloss(x, y) = mse(model(x), y);\n\nget_loss() = @show sum(mse(model(X), YT));\n\n## Training\nfor epoch in 1:20\n  Flux.train!(loss, parameters, data_loader, optimizer, cb = Flux.throttle(get_loss, 5))\nend\n\nsum(mse(model(X), YT)) = 35.254011263534736\nsum(mse(model(X), YT)) = 12.46171269327014\nsum(mse(model(X), YT)) = 2.2635190110050605\nsum(mse(model(X), YT)) = 1.2401000963017133\nsum(mse(model(X), YT)) = 0.6912489741242238\nsum(mse(model(X), YT)) = 0.5464189172742467\nsum(mse(model(X), YT)) = 0.39399982040159687\nsum(mse(model(X), YT)) = 0.2799709648562455\nsum(mse(model(X), YT)) = 0.22626626969525546\nsum(mse(model(X), YT)) = 0.19594999439068672\nsum(mse(model(X), YT)) = 0.15475237595663777\nsum(mse(model(X), YT)) = 0.15207562095418492\nsum(mse(model(X), YT)) = 0.1366212980594906\nsum(mse(model(X), YT)) = 0.14285041851790095\nsum(mse(model(X), YT)) = 0.12735811524649807\nsum(mse(model(X), YT)) = 0.11084125588102431\nsum(mse(model(X), YT)) = 0.10984711694555327\nsum(mse(model(X), YT)) = 0.10183028533968545\nsum(mse(model(X), YT)) = 0.10055789367635456\nsum(mse(model(X), YT)) = 0.10006587279868089\n\n\nPredictions:\n\ntranspose(model(X))[1:5]\n\n5-element Vector{Float64}:\n 5.078324422496932\n 4.708044600690088\n 4.817372548540471\n 4.800092365508\n 5.157734536850637\n\n\n\n\n\n\n\n\n\nAbadi, Martı́n, Paul Barham, Jianmin Chen, Zhifeng Chen, Andy Davis, Jeffrey Dean, Matthieu Devin, et al. 2016. “Tensorflow: A System for Large-Scale Machine Learning.” In 12th \\(\\{\\)USENIX\\(\\}\\) Symposium on Operating Systems Design and Implementation (\\(\\{\\)OSDI\\(\\}\\) 16), 265–83.\n\n\nAllaire, JJ, and François Chollet. 2022. Keras: R Interface to ’Keras’. https://CRAN.R-project.org/package=keras.\n\n\nChollet, Francois et al. 2015. “Keras.” GitHub. 2015. https://github.com/fchollet/keras.\n\n\nInnes, Michael, Elliot Saba, Keno Fischer, Dhairya Gandhi, Marco Concetto Rudilosso, Neethu Mariya Joy, Tejan Karmali, Avik Pal, and Viral Shah. 2018. “Fashionable Modelling with Flux.” CoRR abs/1811.01457. https://arxiv.org/abs/1811.01457."
  },
  {
    "objectID": "cnn.html",
    "href": "cnn.html",
    "title": "7  Convolutional neural networks",
    "section": "",
    "text": "In the following, we will use again the ‘keras’ package (Python: ‘keras’ (Chollet et al. (2015)); Julia: ‘Flux’ (Innes et al. (2018))) but we will not differentiate between classification and regression because the only difference would be to change the last layer and the loss function (see section ‘Deep neural networks’).\nWe will demonstrate the application of CNNs with the MNIST dataset which consists of handwritten digits. The objective of the CNNs is to classify the images. The MNIST dataset is one of the most famous benchmark dataset for image-based tasks (LeCun, Cortes, and Burges (2010)).\n\nRPythonJulia\n\n\n\nlibrary(keras)\ndata = keras::dataset_mnist()\n\nLoaded Tensorflow version 2.10.0\n\ntrain = data$train\nX = train$x/255\n# we have to add a dimension that \n# informs the network about the channels\n# of the images\nX = array(X, dim = c(dim(X), 1))\nYT = k_one_hot(train$y, num_classes = 10)\n\n\n\nCNN = \n  keras_model_sequential() %>% \n  # first hidden layer\n  layer_conv_2d(input_shape = list(28, 28, 1), \n                filters = 16,\n                kernel_size = c(2, 2),\n                activation = \"relu\") %>%\n  layer_average_pooling_2d() %>% \n  layer_conv_2d(filters = 8,\n                kernel_size = c(2, 2),\n                activation = \"relu\") %>%\n  # we use a normal DNN on top of the CNN:\n  # the layer flatten will remove the additional \n  # dimensions\n  layer_flatten() %>% \n  layer_dense(units = 20, \n              activation = \"relu\") %>%\n  # 10 output neurons for 10 classes\n  layer_dense(units = 10, \n              activation = \"softmax\")\n\n\n# print architecture\nsummary(CNN)\n\nModel: \"sequential\"\n________________________________________________________________________________\n Layer (type)                       Output Shape                    Param #     \n================================================================================\n conv2d_1 (Conv2D)                  (None, 27, 27, 16)              80          \n average_pooling2d (AveragePooling2  (None, 13, 13, 16)             0           \n D)                                                                             \n conv2d (Conv2D)                    (None, 12, 12, 8)               520         \n flatten (Flatten)                  (None, 1152)                    0           \n dense_1 (Dense)                    (None, 20)                      23060       \n dense (Dense)                      (None, 10)                      210         \n================================================================================\nTotal params: 23,870\nTrainable params: 23,870\nNon-trainable params: 0\n________________________________________________________________________________\n\n# add loss function and optimizer\nCNN %>% \n  compile(loss = loss_categorical_crossentropy,\n          optimizer = optimizer_adamax(0.01))\n\nCNN %>% \n  fit(X, YT, epochs = 3, batch_size = 125, verbose = 0)\n\nMake predictions (class probabilites):\n\nhead(predict(CNN, X[1:100,,,,drop=FALSE]), n = 3)\n\n             [,1]         [,2]         [,3]         [,4]         [,5]\n[1,] 1.965090e-08 4.356115e-06 1.122467e-04 3.643005e-01 1.273639e-10\n[2,] 9.999302e-01 2.228819e-09 6.124400e-05 3.962018e-08 2.638534e-07\n[3,] 2.012695e-12 1.291264e-07 3.332906e-08 3.386993e-06 9.999701e-01\n             [,6]         [,7]         [,8]         [,9]        [,10]\n[1,] 6.353825e-01 6.928099e-09 1.841055e-05 1.732095e-04 8.759488e-06\n[2,] 1.047530e-08 1.649719e-06 6.396242e-06 7.546749e-08 4.506550e-08\n[3,] 2.200649e-11 4.529752e-10 7.846268e-06 1.812190e-06 1.660780e-05\n\n\n\n\n\nfrom tensorflow import keras\nfrom tensorflow.keras.layers import *\ndata = keras.datasets.mnist.load_data()\ntrain = data[0][0]\nlabels = data[0][1]\n\n# We need to one hot encode our response classes\nYT = keras.utils.to_categorical(labels, num_classes = 10)\n\nCNN = keras.Sequential()\n  # first hidden layer\nCNN.add(Conv2D(input_shape = [28, 28, 1], \n                filters = 16,\n                kernel_size = (2, 2),\n                activation = \"relu\"))\nCNN.add(AveragePooling2D())\nCNN.add(Conv2D(filters = 8,\n                kernel_size = (2, 2),\n                activation = \"relu\"))\n  # we use a normal DNN on top of the CNN:\n  # the layer flatten will remove the additional \n  # dimensions\nCNN.add(Flatten())\n  # output layer, 3 output neurons for our three classes\n  # and softmax activation to get quasi probabilities \n  # that sum up to 1 for each observation\nCNN.add(Dense(\n  units = 10, \n  activation = \"softmax\"))\n\n# print architecture\nCNN.summary()\n\n# add loss function and optimizer\n\nModel: \"sequential_1\"\n_________________________________________________________________\n Layer (type)                Output Shape              Param #   \n=================================================================\n conv2d_2 (Conv2D)           (None, 27, 27, 16)        80        \n                                                                 \n average_pooling2d_1 (Averag  (None, 13, 13, 16)       0         \n ePooling2D)                                                     \n                                                                 \n conv2d_3 (Conv2D)           (None, 12, 12, 8)         520       \n                                                                 \n flatten_1 (Flatten)         (None, 1152)              0         \n                                                                 \n dense_2 (Dense)             (None, 10)                11530     \n                                                                 \n=================================================================\nTotal params: 12,130\nTrainable params: 12,130\nNon-trainable params: 0\n_________________________________________________________________\n\nCNN.compile(loss = keras.losses.categorical_crossentropy,\n            optimizer = keras.optimizers.Adamax(0.01))\n\n# train model\nCNN.fit(train, YT, epochs = 5, verbose = 0)\n\n<keras.callbacks.History object at 0x7f41f81cabe0>\n\n\nMake predictions:\n\nCNN.predict(train[0:10,:,:])\n\n\n1/1 [==============================] - ETA: 0s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n1/1 [==============================] - 0s 40ms/step\narray([[2.73058399e-11, 5.12852705e-10, 6.08049167e-10, 2.43562553e-02,\n        4.99432336e-11, 9.75430012e-01, 1.32788358e-09, 1.10361043e-09,\n        2.33132232e-05, 1.90236795e-04],\n       [9.99909341e-01, 4.28194667e-11, 2.47524281e-06, 3.22915097e-11,\n        3.69686504e-10, 3.31575795e-10, 8.78980791e-05, 1.30885678e-12,\n        1.75022961e-07, 2.92207769e-08],\n       [1.86242036e-10, 3.31999718e-06, 3.40689681e-08, 2.78217680e-08,\n        9.99971926e-01, 2.22715540e-10, 4.35771081e-12, 2.72133593e-06,\n        8.05194304e-07, 2.11609149e-05],\n       [1.04308064e-07, 9.99899924e-01, 2.12908731e-06, 9.57279056e-09,\n        1.54249974e-05, 6.92280056e-09, 1.16389579e-07, 4.02882006e-06,\n        7.77568057e-05, 4.73492236e-07],\n       [6.86259725e-08, 3.67166734e-07, 1.25773326e-07, 6.08295522e-07,\n        1.08382816e-03, 1.26706354e-07, 3.40244521e-12, 1.83549821e-02,\n        4.74471017e-06, 9.80555177e-01],\n       [2.71790706e-12, 7.43156381e-09, 9.99988377e-01, 1.16067767e-07,\n        3.00915337e-09, 1.63208232e-11, 5.44445999e-12, 1.09075728e-07,\n        1.12213984e-05, 1.28492715e-07],\n       [7.45668160e-07, 9.98325646e-01, 8.54519240e-05, 8.99816951e-06,\n        5.18015120e-04, 7.52458902e-07, 1.64569755e-07, 4.39679582e-07,\n        1.05933694e-03, 5.20451124e-07],\n       [6.69499386e-11, 8.18687201e-11, 3.74586136e-07, 9.99990761e-01,\n        9.71549975e-14, 1.62581344e-07, 5.61215510e-17, 2.27084040e-09,\n        3.95518327e-06, 4.80054996e-06],\n       [8.22694020e-08, 9.99639750e-01, 1.82648796e-06, 4.38489496e-06,\n        2.37529792e-04, 7.21763058e-07, 2.96431665e-07, 8.08423101e-06,\n        7.77193782e-05, 2.94992296e-05],\n       [4.26150208e-08, 9.40309963e-09, 5.55570452e-08, 2.99561909e-09,\n        9.99997020e-01, 7.58271113e-10, 6.39962194e-10, 5.68171856e-08,\n        2.87104945e-06, 1.34309447e-11]], dtype=float32)\n\n\n\n\n\nimport StatsBase\nusing RDatasets\nusing StatsBase\nusing DataFrames\nimport MLJBase.int\nusing MLDatasets: MNIST\nusing Flux, Statistics\nusing Flux.Data: DataLoader\nusing Flux: onehotbatch, onecold, @epochs\nusing Flux.Losses: logitcrossentropy\n\nData preparation:\n\nENV[\"DATADEPS_ALWAYS_ACCEPT\"] = \"true\"\n\n\"true\"\n\n\nxtrain, ytrain = MNIST(:train)[:];\nxtrain = reshape(xtrain/255., 28, 28, 1, 60000);\nytrain = onehotbatch(ytrain, 0:9);\n\ndata_loader = DataLoader((xtrain, ytrain), batchsize=100, shuffle=true);\n\nCreate model (similar to Keras):\n\nmodel = Chain(\n  Conv((2, 2), 1=>16, pad = (1, 1), relu),\n  MeanPool((2, 2)),\n  Conv((2, 2), 16=>8, pad = (1, 1), relu),\n  MeanPool((2, 2)),\n  Flux.flatten,\n  Dense(392, 20, relu),\n  Dense(20, 10)\n)\n\nChain(\n  Conv((2, 2), 1 => 16, relu, pad=1),   # 80 parameters\n  MeanPool((2, 2)),\n  Conv((2, 2), 16 => 8, relu, pad=1),   # 520 parameters\n  MeanPool((2, 2)),\n  Flux.flatten,\n  Dense(392 => 20, relu),               # 7_860 parameters\n  Dense(20 => 10),                      # 210 parameters\n)                   # Total: 8 arrays, 8_670 parameters, 34.977 KiB.\n\n\nTrain/optimize Model:\n\nparameters = Flux.params(model);\noptimizer = ADAM(0.01);\n\n# Help functions\nloss(x, y) = logitcrossentropy(model(x), y);\n\nget_loss() = @show sum(logitcrossentropy(model(xtrain[:,:,:,1:100]), ytrain[:,1:100]));\n\n## Training\nfor epoch in 1:1\n  Flux.train!(loss, parameters, data_loader, optimizer, cb = Flux.throttle(get_loss, 6000))\nend\n\nsum(logitcrossentropy(model(xtrain[:, :, :, 1:100]), ytrain[:, 1:100])) = 2.3016892844159544\n\n\nPredictions:\n\nsoftmax(model(xtrain[:,:,:,1:5]))[:,1]\n\n10-element Vector{Float64}:\n 0.0949596365926727\n 0.11319646009727474\n 0.09622221648932856\n 0.1105004159927897\n 0.09568476487396564\n 0.08534299720248913\n 0.10008107419393342\n 0.10874953336990927\n 0.10192039819733163\n 0.09334250299030501\n\n\n\n\n\n\n\n\n\nChollet, Francois et al. 2015. “Keras.” GitHub. 2015. https://github.com/fchollet/keras.\n\n\nInnes, Michael, Elliot Saba, Keno Fischer, Dhairya Gandhi, Marco Concetto Rudilosso, Neethu Mariya Joy, Tejan Karmali, Avik Pal, and Viral Shah. 2018. “Fashionable Modelling with Flux.” CoRR abs/1811.01457. https://arxiv.org/abs/1811.01457.\n\n\nLeCun, Yann, Yoshua Bengio, and Geoffrey Hinton. 2015. “Deep Learning.” Nature 521 (7553): 436–44.\n\n\nLeCun, Yann, Corinna Cortes, and CJ Burges. 2010. “MNIST Handwritten Digit Database.” ATT Labs [Online]. Available: Http://Yann.lecun.com/Exdb/Mnist 2."
  },
  {
    "objectID": "rnn.html",
    "href": "rnn.html",
    "title": "8  Recurrent neural networks",
    "section": "",
    "text": "About the data, we simulated in the following one time series from a simple ARIMA process, using the ‘arima.sim’ function. Our goal is to train a net which is able to predict the next 10 time points based on the previous 10 time points.\n\nRPythonJulia\n\n\n\n## RNNs\nlibrary(keras)\ndata = as.matrix(arima.sim(n = 1000, list(ar = c(0.3, -0.7)) ))\n# We use here a simplified way to create X and Y \n# since the focus is on creating the RNNs\ndata = matrix(data, ncol = 10L, byrow = TRUE)\nX = array(data[seq(1, 100, by = 2), ], dim = c(50, 10, 1))\nY = data[seq(2, 100, by = 2), ]\n\nRNN = \n  keras_model_sequential() %>% \n  # first hidden layer\n  layer_gru(input_shape = list(10L, 1L),\n            units = 50, \n            activation = \"relu\") %>%\n  # we want to predict the next 10 time steps\n  layer_dense(units = 10)\n\nLoaded Tensorflow version 2.10.0\n\n# add loss function and optimizer\nRNN %>% \n  compile(loss = loss_mean_squared_error,\n          optimizer = optimizer_adamax(0.01))\n\nRNN %>% \n  fit(X, Y, epochs = 5, verbose = 0)\n\nMake predictions:\n\nhead(predict(RNN, X), n = 3)\n\n             [,1]       [,2]      [,3]         [,4]       [,5]       [,6]\n[1,]  0.182871714 0.05779056 0.2804810  0.095762551 -0.2876692 -0.7354215\n[2,]  0.242111340 0.21076134 0.3804666  0.008897863 -0.3699271 -0.8426715\n[3,] -0.004352083 0.33250374 0.3860463 -0.031897288 -0.3857037 -0.5717312\n            [,7]      [,8]        [,9]       [,10]\n[1,] -0.08431444 0.4072831 -0.06652965 -0.09972054\n[2,] -0.04815055 0.4886538 -0.09961714 -0.06673245\n[3,]  0.07023557 0.5174094  0.04489198 -0.01002921\n\n\n\n\n\nfrom tensorflow import keras\nfrom tensorflow.keras.layers import *\nX = r.X # get data from R\nY = r.Y \n\nRNN = keras.Sequential()\n  # first hidden layer\nRNN.add(GRU(input_shape = [10, 1],units = 50, activation = \"relu\"))\nRNN.add(Dense(units = 10))\n\nRNN.summary()\n\n# add loss function and optimizer\n\nModel: \"sequential_1\"\n_________________________________________________________________\n Layer (type)                Output Shape              Param #   \n=================================================================\n gru_1 (GRU)                 (None, 50)                7950      \n                                                                 \n dense_1 (Dense)             (None, 10)                510       \n                                                                 \n=================================================================\nTotal params: 8,460\nTrainable params: 8,460\nNon-trainable params: 0\n_________________________________________________________________\n\nRNN.compile(loss = keras.losses.mean_squared_error,\n            optimizer = keras.optimizers.Adamax(0.01))\n\n# train model\nRNN.fit(X, Y, epochs = 5, verbose = 0)\n\n<keras.callbacks.History object at 0x7f0436fa8ee0>\n\n\nMake predictions:\n\nRNN.predict(X)[0:10,:]\n\n\n1/2 [==============>...............] - ETA: 0s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n2/2 [==============================] - 0s 3ms/step\narray([[ 0.08350393, -0.00180464,  0.34325618,  0.21686247, -0.18946874,\n        -0.5937582 , -0.16486388,  0.33871526, -0.11158126, -0.15158123],\n       [ 0.2227844 ,  0.4065776 ,  0.38111433, -0.00899748, -0.41014364,\n        -0.6645749 , -0.13457376,  0.36858225, -0.20998326, -0.1766688 ],\n       [-0.17471497,  0.74995714,  0.7496149 , -0.37774378, -0.77188545,\n        -0.6525765 ,  0.24792194,  0.66503304, -0.12292746, -0.17186296],\n       [-0.28794998,  1.5990531 ,  1.306996  , -0.829319  , -1.5312688 ,\n        -1.1471694 ,  0.5062746 ,  1.2400869 , -0.250422  , -0.299824  ],\n       [-0.23757203,  0.9901169 ,  1.0352945 , -0.53825665, -1.0542827 ,\n        -0.8925454 ,  0.3523099 ,  0.9200909 , -0.17282516, -0.25122654],\n       [-0.08620348,  1.4480689 ,  0.8258031 , -0.821919  , -1.1419564 ,\n        -0.7132156 ,  0.4358264 ,  0.6400992 , -0.24556354, -0.15073477],\n       [-0.17174806,  0.6353523 ,  0.73129326, -0.30230048, -0.7101729 ,\n        -0.66088593,  0.20432712,  0.67419755, -0.10780463, -0.18124355],\n       [-0.31512833, -0.9728573 ,  0.3660514 ,  0.58512855,  0.24408501,\n        -0.4672906 , -0.29277703,  0.7419173 ,  0.24761096, -0.18694049],\n       [-0.18512186,  0.9227145 ,  0.83411753, -0.45813644, -0.9110877 ,\n        -0.73084646,  0.29302734,  0.76778096, -0.14175564, -0.18799058],\n       [-0.3057377 ,  0.2650427 ,  0.8319554 , -0.1744615 , -0.5854104 ,\n        -0.6983775 ,  0.16514157,  0.7936327 , -0.02395438, -0.21329436]],\n      dtype=float32)\n\n\n\n\n\nimport StatsBase;\nusing RDatasets;\nusing StatsBase;\nusing DataFrames;\nimport MLJBase.int;\nusing Flux, Statistics;\nusing Flux.Losses: mse;\nusing ARFIMA;\n\nData preparation:\n\nX = transpose(reshape(convert(Vector{Float32}, arfima(1000,0.5, 0.3, SVector(-0.7))), 100, 10));\nxtrain = X[:, collect(1:2:100)];\nytrain = X[:, collect(2:2:100)];\n\nCreate model (similar to Keras):\n\nmodel = Chain(\n  GRU(10=>50),\n  Dense(50, 10)\n)\n\nChain(\n  Recur(\n    GRUCell(10 => 50),                  # 9_200 parameters\n  ),\n  Dense(50 => 10),                      # 510 parameters\n)         # Total: 6 trainable arrays, 9_710 parameters,\n          # plus 1 non-trainable, 50 parameters, summarysize 38.297 KiB.\n\n\nTrain/optimize Model:\n\nparameters = Flux.params(model);\noptimizer = ADAM(0.01);\n\nfor epoch in 1:10\n    Flux.reset!(model); \n    grads = gradient(parameters) do \n        Pred = [model( xtrain[:,i]) for i in 1:50];\n        loss = mean([mse(Pred[i], ytrain[:,i]) for i in 1:50]);\n        println(loss);\n        loss\n    end\n    Flux.update!(optimizer, parameters, grads);\nend\n\n0.3758767\n0.31391445\n0.27496925\n0.25230625\n0.23890918\n0.22788806\n0.21786831\n0.20987608\n0.20394556\n0.1992052\n\n\nPredictions:\n\nPred = [model( xtrain[:,i]) for i in 1:50];\nPred[1]\n\n10-element Vector{Float32}:\n  0.5586194\n  0.21556926\n -0.4545607\n  0.31776372\n -0.19870074\n -0.2925711\n -0.1116208\n  0.16067675\n  0.064349174\n -0.20158282\n\n\n\n\n\n\n\n\n\nChollet, Francois et al. 2015. “Keras.” GitHub. 2015. https://github.com/fchollet/keras.\n\n\nInnes, Michael, Elliot Saba, Keno Fischer, Dhairya Gandhi, Marco Concetto Rudilosso, Neethu Mariya Joy, Tejan Karmali, Avik Pal, and Viral Shah. 2018. “Fashionable Modelling with Flux.” CoRR abs/1811.01457. https://arxiv.org/abs/1811.01457."
  },
  {
    "objectID": "gnn.html",
    "href": "gnn.html",
    "title": "9  Graph (convolutional) neural networks",
    "section": "",
    "text": "Currently there is no R package for GNNs available. However, we can use the ‘reticulate’ package (Ushey, Allaire, and Tang (2022)) to use the python packages ‘torch’ and ‘torch_geometric’ (Paszke et al. (2019), 2019; Fey and Lenssen (2019)).\nThe following example was mostly adapted from the ‘Node Classification with Graph Neural Networks’ example from the torch_geometric documentation (https://pytorch-geometric.readthedocs.io/en/latest/notes/colabs.html).\nThe dataset is also provided by the ‘torch_geometric’ package and consists of molecules presented as graphs and the task is to predict whether HIV virus replication is inhibited by the molecule or not (classification, binary classification).\nWe have not implemented this example in Julia because there is not yet a well-established library for GNNs.\n\nRPython\n\n\n\nlibrary(reticulate)\n# Load python packages torch and torch_geometric via the reticulate R package\ntorch = import(\"torch\") \ntorch_geometric = import(\"torch_geometric\")\n\n# helper functions from the torch_geometric modules\nGCNConv = torch_geometric$nn$GCNConv\nglobal_mean_pool = torch_geometric$nn$global_mean_pool\n\n\n# Download the MUTAG TUDataset\ndataset = torch_geometric$datasets$TUDataset(root='data/TUDataset', \n                                             name='MUTAG')\ndataloader = torch_geometric$loader$DataLoader(dataset, \n                                               batch_size=64L,\n                                               shuffle=TRUE)\n\n# Create the model with a python class\n# There are two classes in the response variable\nGCN = PyClass(\n  \"GCN\", \n   inherit = torch$nn$Module, \n   defs = list(\n       `__init__` = function(self, hidden_channels) {\n         super()$`__init__`()\n         torch$manual_seed(42L)\n         self$conv = GCNConv(dataset$num_node_features, hidden_channels)\n         self$linear = torch$nn$Linear(hidden_channels, dataset$num_classes)\n         NULL\n       },\n       forward = function(self, x, edge_index, batch) {\n         x = self$conv(x, edge_index)\n         x = x$relu()\n         x = global_mean_pool(x, batch)\n         \n         x = torch$nn$functional$dropout(x, p = 0.5, training=self$training)\n         x = self$linear(x)\n         return(x)\n       }\n   ))\n\nTraining loop:\n\n# create model object\nmodel = GCN(hidden_channels = 64L)\n\n# get optimizer and loss function\noptimizer = torch$optim$Adamax(model$parameters(), lr = 0.01)\nloss_func = torch$nn$CrossEntropyLoss()\n\n# set model into training mode (because of the dropout layer)\nmodel$train()\n\nGCN(\n  (conv): GCNConv(7, 64)\n  (linear): Linear(in_features=64, out_features=2, bias=True)\n)\n\n# train model\nfor(e in 1:50) {\n  iterator = reticulate::as_iterator(dataloader)\n  coro::loop(for (b in iterator) { \n     pred = model(b$x, b$edge_index, b$batch)\n     loss = loss_func(pred, b$y)\n     loss$backward()\n     optimizer$step()\n     optimizer$zero_grad()\n  })\n  if(e %% 10 ==0) cat(paste0(\"Epoch: \",e,\" Loss: \", round(loss$item()[1], 4), \"\\n\"))\n}\n\nEpoch: 10 Loss: 0.6151\nEpoch: 20 Loss: 0.6163\nEpoch: 30 Loss: 0.5745\nEpoch: 40 Loss: 0.5362\nEpoch: 50 Loss: 0.5829\n\n\nMake predictions:\n\npreds = list()\ntest = torch_geometric$loader$DataLoader(dataset, batch_size=64L,shuffle=FALSE)\niterator = reticulate::as_iterator(test)\nmodel$eval()\n\nGCN(\n  (conv): GCNConv(7, 64)\n  (linear): Linear(in_features=64, out_features=2, bias=True)\n)\n\ncounter = 1\ncoro::loop(for (b in iterator) {\n  preds[[counter]] = model(b$x, b$edge_index, b$batch)\n  counter <<- counter + 1\n  })\nhead(torch$concat(preds)$sigmoid()$data$cpu()$numpy(), n = 3)\n\n          [,1]      [,2]\n[1,] 0.3076028 0.6427078\n[2,] 0.4121239 0.5515330\n[3,] 0.4119514 0.5516798\n\n\n\n\n\n# Load python packages torch and torch_geometric via the reticulate R package\nimport torch\nimport torch_geometric\n\n# helper functions from the torch_geometric modules\nGCNConv = torch_geometric.nn.GCNConv\nglobal_mean_pool = torch_geometric.nn.global_mean_pool\n\n\n# Download the MUTAG TUDataset\ndataset = torch_geometric.datasets.TUDataset(root='data/TUDataset', \n                                             name='MUTAG')\ndataloader = torch_geometric.loader.DataLoader(dataset, \n                                               batch_size=64,\n                                               shuffle=True)\n\n# Create the model with a python class\n# There are two classes in the response variable\nclass GCN(torch.nn.Module):\n    def __init__(self, hidden_channels):\n         super().__init__()\n         torch.manual_seed(42)\n         self.conv = GCNConv(dataset.num_node_features, hidden_channels)\n         self.linear = torch.nn.Linear(hidden_channels, dataset.num_classes)\n         \n    def forward(self, x, edge_index, batch):\n        x = self.conv(x, edge_index)\n        x = x.relu()\n        x = global_mean_pool(x, batch)\n        x = torch.nn.functional.dropout(x, p = 0.5, training=self.training)\n        x = self.linear(x)\n        return x\n\nTraining loop:\n\n# create model object\nmodel = GCN(hidden_channels = 64)\n\n# get optimizer and loss function\noptimizer = torch.optim.Adamax(model.parameters(), lr = 0.01)\nloss_func = torch.nn.CrossEntropyLoss()\n\n# set model into training mode (because of the dropout layer)\nmodel.train()\n\n# train model\n\nGCN(\n  (conv): GCNConv(7, 64)\n  (linear): Linear(in_features=64, out_features=2, bias=True)\n)\n\nfor e in range(50):\n  for b in dataloader:\n  \n    pred = model(b.x, b.edge_index, b.batch)\n    loss = loss_func(pred, b.y)\n    loss.backward()\n    optimizer.step()\n    optimizer.zero_grad()\n     \n  if e % 10 ==0:\n    print(\"Epoch: \", e ,\" Loss: \", loss.item(), \"\\n\")\n\nEpoch:  0  Loss:  0.6617004871368408 \n\nEpoch:  10  Loss:  0.614981472492218 \n\nEpoch:  20  Loss:  0.6161867380142212 \n\nEpoch:  30  Loss:  0.5802667737007141 \n\nEpoch:  40  Loss:  0.5124867558479309 \n\n\nMake predictions:\n\npreds = []\ntest = torch_geometric.loader.DataLoader(dataset, batch_size=64,shuffle=False)\nmodel.eval()\n\nGCN(\n  (conv): GCNConv(7, 64)\n  (linear): Linear(in_features=64, out_features=2, bias=True)\n)\n\ncounter = 1\nfor b in test:\n  preds.append( model(b.x, b.edge_index, b.batch) )\n  \n  \ntorch.concat(preds).sigmoid().data.cpu().numpy()[0:10]\n\narray([[0.30760282, 0.64270777],\n       [0.41212386, 0.551533  ],\n       [0.4119514 , 0.5516798 ],\n       [0.29887193, 0.650517  ],\n       [0.48894534, 0.48584774],\n       [0.4310807 , 0.5360305 ],\n       [0.31375578, 0.63721913],\n       [0.34597102, 0.6093393 ],\n       [0.50279325, 0.4740774 ],\n       [0.30924183, 0.6412629 ]], dtype=float32)\n\n\n\n\n\n\n\n\n\nFey, Matthias, and Jan E. Lenssen. 2019. “Fast Graph Representation Learning with PyTorch Geometric.” In ICLR Workshop on Representation Learning on Graphs and Manifolds.\n\n\nPaszke, Adam, Sam Gross, Francisco Massa, Adam Lerer, James Bradbury, Gregory Chanan, Trevor Killeen, et al. 2019. “PyTorch: An Imperative Style, High-Performance Deep Learning Library.” In Advances in Neural Information Processing Systems 32, 8024–35. Curran Associates, Inc. http://papers.neurips.cc/paper/9015-pytorch-an-imperative-style-high-performance-deep-learning-library.pdf.\n\n\nUshey, Kevin, JJ Allaire, and Yuan Tang. 2022. Reticulate: Interface to ’Python’. https://CRAN.R-project.org/package=reticulate."
  },
  {
    "objectID": "refs.html",
    "href": "refs.html",
    "title": "References",
    "section": "",
    "text": "Abadi, Martı́n, Paul Barham, Jianmin Chen, Zhifeng Chen, Andy Davis,\nJeffrey Dean, Matthieu Devin, et al. 2016. “Tensorflow: A System\nfor Large-Scale Machine Learning.” In 12th {USENIX}\nSymposium on Operating Systems Design and Implementation ({OSDI}\n16), 265–83.\n\n\nAllaire, JJ, and François Chollet. 2022. Keras: R Interface to\n’Keras’. https://CRAN.R-project.org/package=keras.\n\n\nBlaom, Anthony, Franz Kiraly, Thibaut Lienart, and Sebastian Vollmer.\n2019. Alan-Turing-Institute/MLJ.jl: V0.5.3 (version v0.5.3).\nZenodo. https://doi.org/10.5281/zenodo.3541506.\n\n\nChen, Tianqi, Tong He, Michael Benesty, Vadim Khotilovich, Yuan Tang,\nHyunsu Cho, Kailong Chen, et al. 2022. Xgboost: Extreme Gradient\nBoosting. https://CRAN.R-project.org/package=xgboost.\n\n\nChollet, Francois et al. 2015. “Keras.” GitHub. 2015. https://github.com/fchollet/keras.\n\n\nFey, Matthias, and Jan E. Lenssen. 2019. “Fast Graph\nRepresentation Learning with PyTorch Geometric.” In\nICLR Workshop on Representation Learning on Graphs and\nManifolds.\n\n\nInnes, Michael, Elliot Saba, Keno Fischer, Dhairya Gandhi, Marco\nConcetto Rudilosso, Neethu Mariya Joy, Tejan Karmali, Avik Pal, and\nViral Shah. 2018. “Fashionable Modelling with Flux.”\nCoRR abs/1811.01457. https://arxiv.org/abs/1811.01457.\n\n\nLeCun, Yann, Yoshua Bengio, and Geoffrey Hinton. 2015. “Deep\nLearning.” Nature 521 (7553): 436–44.\n\n\nLeCun, Yann, Corinna Cortes, and CJ Burges. 2010.\n“MNIST Handwritten Digit Database.” ATT\nLabs [Online]. Available: Http://Yann.lecun.com/Exdb/Mnist 2.\n\n\nMeyer, David, Evgenia Dimitriadou, Kurt Hornik, Andreas Weingessel, and\nFriedrich Leisch. 2022. E1071: Misc Functions of the Department of\nStatistics, Probability Theory Group (Formerly: E1071), TU Wien. https://CRAN.R-project.org/package=e1071.\n\n\nPaszke, Adam, Sam Gross, Francisco Massa, Adam Lerer, James Bradbury,\nGregory Chanan, Trevor Killeen, et al. 2019. “PyTorch: An\nImperative Style, High-Performance Deep Learning Library.” In\nAdvances in Neural Information Processing Systems 32, 8024–35.\nCurran Associates, Inc. http://papers.neurips.cc/paper/9015-pytorch-an-imperative-style-high-performance-deep-learning-library.pdf.\n\n\nPedregosa, F., G. Varoquaux, A. Gramfort, V. Michel, B. Thirion, O.\nGrisel, M. Blondel, et al. 2011. “Scikit-Learn: Machine Learning\nin Python.” Journal of Machine Learning\nResearch 12: 2825–30.\n\n\nSchliep, Klaus, and Klaus Hechenbichler. 2016. Kknn: Weighted\nk-Nearest Neighbors. https://CRAN.R-project.org/package=kknn.\n\n\nSimon, Noah, Jerome Friedman, Trevor Hastie, and Rob Tibshirani. 2011.\n“Regularization Paths for Cox’s Proportional Hazards Model via\nCoordinate Descent.” Journal of Statistical Software 39\n(5): 1–13. https://doi.org/10.18637/jss.v039.i05.\n\n\nUshey, Kevin, JJ Allaire, and Yuan Tang. 2022. Reticulate: Interface\nto ’Python’. https://CRAN.R-project.org/package=reticulate.\n\n\nWright, Marvin N., and Andreas Ziegler. 2017. “ranger: A Fast Implementation of Random Forests\nfor High Dimensional Data in C++ and\nR.” Journal of Statistical Software 77 (1):\n1–17. https://doi.org/10.18637/jss.v077.i01."
  }
]