{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\n",
    "from sklearn import datasets\n",
    "iris = datasets.load_iris()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Classification\n",
    "Response: Species -> 3 classes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier()"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = iris.data\n",
    "Y = iris.target\n",
    "rf = RandomForestClassifier()\n",
    "rf.fit(X, Y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Make predictions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred = rf.predict_proba(X)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Probabilities for each species:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 0., 0.],\n",
       "       [1., 0., 0.],\n",
       "       [1., 0., 0.],\n",
       "       [1., 0., 0.],\n",
       "       [1., 0., 0.],\n",
       "       [1., 0., 0.],\n",
       "       [1., 0., 0.],\n",
       "       [1., 0., 0.],\n",
       "       [1., 0., 0.],\n",
       "       [1., 0., 0.],\n",
       "       [1., 0., 0.],\n",
       "       [1., 0., 0.],\n",
       "       [1., 0., 0.],\n",
       "       [1., 0., 0.],\n",
       "       [1., 0., 0.]])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred[0:15,:]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Variable importance:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.10279415, 0.01999918, 0.42924541, 0.44796125])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf.feature_importances_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Regression\n",
    "Response: Sepal.Length -> continuous"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor()"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = iris.data\n",
    "rf = RandomForestRegressor()\n",
    "rf.fit(X[:,1:], X[:,0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Make predictions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[5.126      4.822      4.55495    4.75746429 5.026      5.429\n",
      " 4.79333333 5.08605    4.591      4.8535     5.33551667 4.90425\n",
      " 4.788      4.4945     5.657      5.566      5.452      5.042\n",
      " 5.534      5.17881667 5.204      5.1788     4.757      5.11\n",
      " 4.959      4.93925    5.088      5.16483333 5.09683333 4.721\n",
      " 4.81157143 5.2765     5.34083333 5.489      4.75746429 4.8157\n",
      " 5.2985     4.952      4.47975    5.08605    5.095      4.505\n",
      " 4.55495    5.045      5.209      4.781      5.17333333 4.6553\n",
      " 5.33551667 4.941      6.745      6.2313     6.836      5.646\n",
      " 6.40133333 5.843      6.368      5.022      6.391      5.49\n",
      " 5.193      5.81666667 5.799      6.203      5.535      6.5478\n",
      " 5.6199     5.774      6.057      5.581      6.175      5.942\n",
      " 6.256      6.174      6.24113333 6.34746667 6.574      6.561\n",
      " 5.84646667 5.496      5.521      5.499      5.751      6.054\n",
      " 5.6199     6.087      6.668      6.1776     5.685      5.58\n",
      " 5.6936     6.25933333 5.752      5.032      5.654      5.723\n",
      " 5.71466667 6.24113333 5.101      5.744      6.631      5.864\n",
      " 6.919      6.376      6.638      7.615      5.18033333 7.42\n",
      " 6.709      7.334      6.438      6.281      6.719      5.806\n",
      " 5.926      6.525      6.505      7.666      7.662      6.103\n",
      " 6.795      5.793      7.665      6.226      6.687      6.992\n",
      " 6.198      6.132      6.352      6.994      7.38       7.702\n",
      " 6.364      6.294      6.254      7.541      6.323      6.476\n",
      " 6.014      6.816      6.662      6.742      5.864      6.824\n",
      " 6.661      6.651      6.149      6.508      6.291      6.128     ]\n"
     ]
    }
   ],
   "source": [
    "pred = rf.predict(X[:,1:])\n",
    "print(pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Variable importance:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.08118679, 0.85843329, 0.06037992])"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf.feature_importances_"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "b2c8e16c7ccab309b6c7ff727be01f1772ce77360f8d9c2b6c3a69dbab5f4903"
  },
  "kernelspec": {
   "display_name": "Python 3.7.1",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
