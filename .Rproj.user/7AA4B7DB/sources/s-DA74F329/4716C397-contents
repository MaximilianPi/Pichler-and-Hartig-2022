library(sjSDM)

com = simulate_SDM()

X = com$env_weights
Y = com$response

which(Y[1,] ==1)


Y2 = Y* (matrix(rep(1:ncol(Y), nrow(Y)), nrow = nrow(Y), byrow = TRUE))


library(tensorflow)
library(keras)

em = tf$keras$Sequential(list(
  tf$keras$layers$InputLayer(input_shape = list(ncol(Y))),
  tf$keras$layers$Embedding(20L, 2L, input_length = 5L ),
  tf$keras$layers$Flatten(),
  tf$keras$layers$Dense(units = 5L, activation=NULL)
))


env = tf$keras$Sequential(list(
  tf$keras$layers$InputLayer(input_shape=list(ncol(X))),
  tf$keras$layers$Dense(units = 5L, activation=NULL)
))

out = tf$keras$Sequential(list(
  tf$keras$layers$InputLayer(input_shape = list(5L)),
  #tf$keras$layers$Dense(ncol(Y), activation = tf$keras$activations$sigmoid ),
  tf$keras$layers$Activation(tf$keras$activations$sigmoid)
))

model = tf$keras$Model(
  inputs = list(env$input, em$input),
  outputs = out(tf$math$add(env$output, em$output), 1L))
)


model$compile(loss = tf$keras$losses$binary_crossentropy, optimizer = tf$keras$optimizers$Adamax(0.01))

model$fit(x = list(X, Y2), y = Y, epochs = 50L, batch_size=5L)


cor(Y[,2], model(Y2)$numpy()[,2])

embd = tf$keras$Model(inputs=em$input, outputs=em$layers[[1]]$output)

plot(embd(Y2)$numpy()[1,,], pch = paste0(1:5))

plot(apply(embd(Y2)$numpy(), 2:3, mean), pch = paste0(1:5))
