{
  "hash": "225d192a4c635c2974c054ede7e9fc24",
  "result": {
    "markdown": "# Convolutional neural networks\n\n\n\n\n\n\nConvolutional neural networks (CNN) are also deep neural networks but they are based on convolutional layers, which is a biologically inspired variation optimized to process image-based data (@lecun2015deep). CNNs consist of two stages, in the first, the images are passed through convolutional layers and the models learns to detect edges and shapes in the images. In the second stage, the dimensions are dropped and fully-connected layers are used to classify the previously identified shapes.\n\nIn the following, we will use again the 'keras' package (Python: 'keras' (@chollet2015keras); Julia: 'Flux' (@Flux)) but we will not differentiate between classification and regression because the only difference would be to change the last layer and the loss function (see section 'Deep neural networks').\n\nWe will demonstrate the application of CNNs with the MNIST dataset which consists of handwritten digits. The objective of the CNNs is to classify the images. The MNIST dataset is one of the most famous benchmark dataset for image-based tasks (@lecun_mnist_2010).\n\n::: panel-tabset\n## R\n\n\n::: {.cell hash='cnn_cache/html/unnamed-chunk-2_94c34259ac1244597c8e9d4eeb3cce82'}\n\n```{.r .cell-code}\nlibrary(keras)\ndata = keras::dataset_mnist()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoaded Tensorflow version 2.10.0\n```\n:::\n\n```{.r .cell-code}\ntrain = data$train\nX = train$x/255\n# we have to add a dimension that \n# informs the network about the channels\n# of the images\nX = array(X, dim = c(dim(X), 1))\nYT = k_one_hot(train$y, num_classes = 10)\n\n\n\nCNN = \n  keras_model_sequential() %>% \n  # first hidden layer\n  layer_conv_2d(input_shape = list(28, 28, 1), \n                filters = 16,\n                kernel_size = c(2, 2),\n                activation = \"relu\") %>%\n  layer_average_pooling_2d() %>% \n  layer_conv_2d(filters = 8,\n                kernel_size = c(2, 2),\n                activation = \"relu\") %>%\n  # we use a normal DNN on top of the CNN:\n  # the layer flatten will remove the additional \n  # dimensions\n  layer_flatten() %>% \n  layer_dense(units = 20, \n              activation = \"relu\") %>%\n  # 10 output neurons for 10 classes\n  layer_dense(units = 10, \n              activation = \"softmax\")\n\n\n# print architecture\nsummary(CNN)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nModel: \"sequential\"\n________________________________________________________________________________\n Layer (type)                       Output Shape                    Param #     \n================================================================================\n conv2d_1 (Conv2D)                  (None, 27, 27, 16)              80          \n average_pooling2d (AveragePooling2  (None, 13, 13, 16)             0           \n D)                                                                             \n conv2d (Conv2D)                    (None, 12, 12, 8)               520         \n flatten (Flatten)                  (None, 1152)                    0           \n dense_1 (Dense)                    (None, 20)                      23060       \n dense (Dense)                      (None, 10)                      210         \n================================================================================\nTotal params: 23,870\nTrainable params: 23,870\nNon-trainable params: 0\n________________________________________________________________________________\n```\n:::\n\n```{.r .cell-code}\n# add loss function and optimizer\nCNN %>% \n  compile(loss = loss_categorical_crossentropy,\n          optimizer = optimizer_adamax(0.01))\n\nCNN %>% \n  fit(X, YT, epochs = 3, batch_size = 125, verbose = 0)\n```\n:::\n\n\nMake predictions (class probabilites):\n\n\n::: {.cell hash='cnn_cache/html/unnamed-chunk-3_9d62ce6aa87994dc173ada719e10921d'}\n\n```{.r .cell-code}\nhead(predict(CNN, X[1:100,,,,drop=FALSE]), n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             [,1]         [,2]         [,3]         [,4]         [,5]\n[1,] 2.425084e-08 2.880918e-07 4.143541e-08 9.217440e-02 5.395139e-10\n[2,] 9.999260e-01 5.911451e-09 5.907062e-05 2.765627e-08 1.134630e-08\n[3,] 6.202117e-08 1.781751e-06 7.806528e-07 6.182400e-06 9.959503e-01\n             [,6]         [,7]         [,8]         [,9]        [,10]\n[1,] 9.077224e-01 5.556984e-08 5.069603e-08 7.870004e-05 2.408227e-05\n[2,] 7.944796e-09 2.350163e-06 1.962552e-07 4.941584e-06 7.313301e-06\n[3,] 1.674008e-07 1.992673e-08 1.871501e-05 1.647718e-03 2.374151e-03\n```\n:::\n:::\n\n\n## Python\n\n\n::: {.cell hash='cnn_cache/html/unnamed-chunk-4_1549ddb0ce34d5bec00e3fb4ca420183'}\n\n```{.python .cell-code}\nfrom tensorflow import keras\nfrom tensorflow.keras.layers import *\ndata = keras.datasets.mnist.load_data()\ntrain = data[0][0]\nlabels = data[0][1]\n\n# We need to one hot encode our response classes\nYT = keras.utils.to_categorical(labels, num_classes = 10)\n\nCNN = keras.Sequential()\n  # first hidden layer\nCNN.add(Conv2D(input_shape = [28, 28, 1], \n                filters = 16,\n                kernel_size = (2, 2),\n                activation = \"relu\"))\nCNN.add(AveragePooling2D())\nCNN.add(Conv2D(filters = 8,\n                kernel_size = (2, 2),\n                activation = \"relu\"))\n  # we use a normal DNN on top of the CNN:\n  # the layer flatten will remove the additional \n  # dimensions\nCNN.add(Flatten())\n  # output layer, 3 output neurons for our three classes\n  # and softmax activation to get quasi probabilities \n  # that sum up to 1 for each observation\nCNN.add(Dense(\n  units = 10, \n  activation = \"softmax\"))\n\n# print architecture\nCNN.summary()\n\n# add loss function and optimizer\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nModel: \"sequential_1\"\n_________________________________________________________________\n Layer (type)                Output Shape              Param #   \n=================================================================\n conv2d_2 (Conv2D)           (None, 27, 27, 16)        80        \n                                                                 \n average_pooling2d_1 (Averag  (None, 13, 13, 16)       0         \n ePooling2D)                                                     \n                                                                 \n conv2d_3 (Conv2D)           (None, 12, 12, 8)         520       \n                                                                 \n flatten_1 (Flatten)         (None, 1152)              0         \n                                                                 \n dense_2 (Dense)             (None, 10)                11530     \n                                                                 \n=================================================================\nTotal params: 12,130\nTrainable params: 12,130\nNon-trainable params: 0\n_________________________________________________________________\n```\n:::\n\n```{.python .cell-code}\nCNN.compile(loss = keras.losses.categorical_crossentropy,\n            optimizer = keras.optimizers.Adamax(0.01))\n\n# train model\nCNN.fit(train, YT, epochs = 5, verbose = 0)\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<keras.callbacks.History object at 0x7f0b44785c70>\n```\n:::\n:::\n\n\nMake predictions:\n\n\n::: {.cell hash='cnn_cache/html/unnamed-chunk-5_88b67efdbe997e3108dabfac5e4256cb'}\n\n```{.python .cell-code}\nCNN.predict(train[0:10,:,:])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n1/1 [==============================] - ETA: 0s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n1/1 [==============================] - 0s 39ms/step\narray([[1.1181537e-09, 2.2871836e-10, 8.1618259e-09, 1.0941692e-02,\n        1.2186857e-12, 9.8905164e-01, 7.4941531e-10, 3.2881280e-06,\n        2.9509465e-06, 4.6295472e-07],\n       [9.9913085e-01, 5.6235383e-08, 7.3662569e-04, 3.6811846e-07,\n        3.6626862e-08, 6.4597992e-07, 7.8866004e-05, 1.0132234e-10,\n        3.3926879e-06, 4.9185153e-05],\n       [7.7702627e-12, 5.6763956e-06, 4.4048205e-09, 1.5371381e-07,\n        9.9968910e-01, 4.1317495e-08, 5.5084448e-10, 7.7227251e-06,\n        8.8550350e-06, 2.8850837e-04],\n       [6.7505084e-08, 9.9908459e-01, 6.0488185e-04, 3.7413037e-07,\n        5.9135229e-05, 1.0721207e-08, 2.4258597e-08, 1.6805495e-04,\n        8.2748382e-05, 1.2584145e-07],\n       [1.6376575e-10, 1.8257330e-07, 1.0599615e-07, 2.1357984e-04,\n        2.0651119e-04, 4.6220787e-08, 3.0120306e-11, 6.0984075e-05,\n        5.0008623e-08, 9.9951857e-01],\n       [8.1270095e-08, 1.7270331e-08, 9.9999934e-01, 3.6143469e-08,\n        3.9866994e-09, 3.2378559e-14, 8.1235237e-15, 2.5397111e-07,\n        9.8850762e-08, 3.6428407e-08],\n       [8.8377601e-07, 9.9956709e-01, 6.9225271e-06, 1.0397793e-05,\n        4.9456748e-06, 3.5048351e-06, 2.2041748e-05, 1.1251929e-07,\n        3.7966701e-04, 4.5567990e-06],\n       [2.7390620e-12, 6.8532867e-11, 2.4177119e-08, 9.9999791e-01,\n        9.8699826e-17, 8.3391809e-09, 6.0832223e-18, 1.5824456e-10,\n        3.4807883e-08, 1.9520967e-06],\n       [6.6492216e-06, 9.9919182e-01, 2.7197627e-06, 2.3677121e-06,\n        5.3769606e-04, 2.3768218e-05, 2.7554268e-05, 1.1666738e-04,\n        8.4651707e-05, 6.0710104e-06],\n       [1.6910246e-08, 2.0487221e-07, 1.0832826e-07, 1.6800383e-09,\n        9.9999189e-01, 1.1831921e-08, 1.7606248e-09, 7.0846800e-06,\n        7.0496088e-07, 5.9994800e-12]], dtype=float32)\n```\n:::\n:::\n\n\n## Julia\n\n\n::: {.cell hash='cnn_cache/html/unnamed-chunk-6_b0a0990e688c549f205a486cf65e8012'}\n\n```{.julia .cell-code}\nimport StatsBase\nusing RDatasets\nusing StatsBase\nusing DataFrames\nimport MLJBase.int\nusing MLDatasets: MNIST\nusing Flux, Statistics\nusing Flux.Data: DataLoader\nusing Flux: onehotbatch, onecold, @epochs\nusing Flux.Losses: logitcrossentropy\n```\n:::\n\n\nData preparation:\n\n\n::: {.cell hash='cnn_cache/html/unnamed-chunk-7_6e5f18e6f0217007a7cfdf29179fbb66'}\n\n```{.julia .cell-code}\nENV[\"DATADEPS_ALWAYS_ACCEPT\"] = \"true\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\"true\"\n```\n:::\n\n```{.julia .cell-code}\n\nxtrain, ytrain = MNIST(:train)[:];\nxtrain = reshape(xtrain/255., 28, 28, 1, 60000);\nytrain = onehotbatch(ytrain, 0:9);\n\ndata_loader = DataLoader((xtrain, ytrain), batchsize=100, shuffle=true);\n```\n:::\n\n\nCreate model (similar to Keras):\n\n\n::: {.cell hash='cnn_cache/html/unnamed-chunk-8_03e481ba155c21a5ba3f0e262fc0133f'}\n\n```{.julia .cell-code}\nmodel = Chain(\n  Conv((2, 2), 1=>16, pad = (1, 1), relu),\n  MeanPool((2, 2)),\n  Conv((2, 2), 16=>8, pad = (1, 1), relu),\n  MeanPool((2, 2)),\n  Flux.flatten,\n  Dense(392, 20, relu),\n  Dense(20, 10)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nChain(\n  Conv((2, 2), 1 => 16, relu, pad=1),   # 80 parameters\n  MeanPool((2, 2)),\n  Conv((2, 2), 16 => 8, relu, pad=1),   # 520 parameters\n  MeanPool((2, 2)),\n  Flux.flatten,\n  Dense(392 => 20, relu),               # 7_860 parameters\n  Dense(20 => 10),                      # 210 parameters\n)                   # Total: 8 arrays, 8_670 parameters, 34.977 KiB.\n```\n:::\n:::\n\n\nTrain/optimize Model:\n\n\n::: {.cell hash='cnn_cache/html/unnamed-chunk-9_a9cbe3b60d4874aef3b0756be18eca8b'}\n\n```{.julia .cell-code}\nparameters = Flux.params(model);\noptimizer = ADAM(0.01);\n\n# Help functions\nloss(x, y) = logitcrossentropy(model(x), y);\n\nget_loss() = @show sum(logitcrossentropy(model(xtrain[:,:,:,1:100]), ytrain[:,1:100]));\n\n## Training\nfor epoch in 1:1\n  Flux.train!(loss, parameters, data_loader, optimizer, cb = Flux.throttle(get_loss, 6000))\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsum(logitcrossentropy(model(xtrain[:, :, :, 1:100]), ytrain[:, 1:100])) = 2.301290467968534\n```\n:::\n:::\n\n\nPredictions:\n\n\n::: {.cell hash='cnn_cache/html/unnamed-chunk-10_9ffdf755f40901d02331e1ea4c56cca6'}\n\n```{.julia .cell-code}\nsoftmax(model(xtrain[:,:,:,1:5]))[:,1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10-element Vector{Float64}:\n 0.10213041258365503\n 0.11425505318257256\n 0.09493333518971231\n 0.10597267878754779\n 0.09368559004328189\n 0.0916453414163753\n 0.10353605754913195\n 0.09766811239812598\n 0.09657222751232929\n 0.09960119133726789\n```\n:::\n:::\n\n\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}