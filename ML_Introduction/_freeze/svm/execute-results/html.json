{
  "hash": "0cf8fcb9abca9dee0753ab8ec810c0a6",
  "result": {
    "markdown": "# Support Vector Machines\n\n\n\n\n\nThe support vector machine (SVM) algorithm estimates hyper-planes to separate our response species. In the following we use the 'e1071' package which supports a variety of different SVM algorithms (@e1071) (Python: 'scikit-learn' (@scikit-learn), Julia: 'MLJ' (@anthony_blaom_2019_3541506)).\n\n## Classification\n\n::: panel-tabset\n### R\n\n\n::: {.cell hash='svm_cache/html/unnamed-chunk-2_a0a5d78124e292263a9e4e7dc21b5d43'}\n\n```{.r .cell-code}\nlibrary(e1071)\nX = scale(iris[,1:4])\nY = iris$Species\n\nsv = svm(X, Y, probability = TRUE) \nsummary(sv)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nsvm.default(x = X, y = Y, probability = TRUE)\n\n\nParameters:\n   SVM-Type:  C-classification \n SVM-Kernel:  radial \n       cost:  1 \n\nNumber of Support Vectors:  51\n\n ( 8 22 21 )\n\n\nNumber of Classes:  3 \n\nLevels: \n setosa versicolor virginica\n```\n:::\n:::\n\n\nMake predictions (class probabilities):\n\n\n::: {.cell hash='svm_cache/html/unnamed-chunk-3_481e40ca9190f6ea7a3114288cf5d6aa'}\n\n```{.r .cell-code}\nhead(attr(predict(sv, newdata = X, probability = TRUE), \"probabilities\"), n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     setosa versicolor   virginica\n1 0.9805061 0.01078548 0.008708392\n2 0.9733815 0.01726277 0.009355782\n3 0.9792178 0.01138534 0.009396853\n```\n:::\n:::\n\n\n### Python\n\n\n::: {.cell hash='svm_cache/html/unnamed-chunk-4_7fb7e4b71e456ca5484ba0149e3b3986'}\n\n```{.python .cell-code}\nfrom sklearn import svm\nfrom sklearn import datasets\nfrom sklearn.preprocessing import scale\niris = datasets.load_iris()\nX = scale(iris.data)\nY = iris.target\n\nmodel = svm.SVC(probability=True).fit(X, Y)\n\n# Make predictions (class probabilities):\n\nmodel.predict_proba(X)[0:10,:]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narray([[0.98010734, 0.01119254, 0.00870012],\n       [0.97290852, 0.01775589, 0.00933559],\n       [0.97887363, 0.01174829, 0.00937808],\n       [0.97488338, 0.01505638, 0.01006024],\n       [0.97925052, 0.01154893, 0.00920055],\n       [0.97383204, 0.01661416, 0.00955379],\n       [0.97548544, 0.0133769 , 0.01113766],\n       [0.98001151, 0.01129966, 0.00868883],\n       [0.96617856, 0.02211025, 0.01171119],\n       [0.97667451, 0.01385397, 0.00947152]])\n```\n:::\n:::\n\n\n### Julia\n\n\n::: {.cell hash='svm_cache/html/unnamed-chunk-5_0c7e64ba6e65aafa501cf56c41f9d046'}\n\n```{.julia .cell-code}\nimport StatsBase;\nusing MLJ;\nSVM_classifier = @load NuSVC pkg=LIBSVM;\nusing RDatasets;\nusing StatsBase;\nusing DataFrames;\n```\n:::\n\n::: {.cell hash='svm_cache/html/unnamed-chunk-6_061746d4f068f266a3d706dac295eeb8'}\n\n```{.julia .cell-code}\niris = dataset(\"datasets\", \"iris\");\nX = mapcols(StatsBase.zscore, iris[:, 1:4]);\nY = iris[:, 5];\n```\n:::\n\n\nModels:\n\n\n::: {.cell hash='svm_cache/html/unnamed-chunk-7_9dc5c1d9351bbb7e1229d0b4072569ca'}\n\n```{.julia .cell-code}\nmodel = fit!(machine(SVM_classifier(), X, Y))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntrained Machine; caches model-specific representations of data\n  model: NuSVC(kernel = RadialBasis, …)\n  args: \n    1:\tSource @942 ⏎ Table{AbstractVector{Continuous}}\n    2:\tSource @621 ⏎ AbstractVector{Multiclass{3}}\n```\n:::\n:::\n\n\nPredictions:\n\n\n::: {.cell hash='svm_cache/html/unnamed-chunk-8_18d42cb29b163ee6963b6b68af63780d'}\n\n```{.julia .cell-code}\nMLJ.predict(model, X)[1:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5-element CategoricalArrays.CategoricalArray{String,1,UInt8}:\n \"setosa\"\n \"setosa\"\n \"setosa\"\n \"setosa\"\n \"setosa\"\n```\n:::\n:::\n\n:::\n\n## Regression\n\n::: panel-tabset\n### R\n\n\n::: {.cell hash='svm_cache/html/unnamed-chunk-9_94030cacdfb2f351be95e7fa9933d1d1'}\n\n```{.r .cell-code}\nlibrary(e1071)\nX = scale(iris[,2:4])\nY = iris[,1]\n\nsv = svm(X, Y) \nsummary(sv)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nsvm.default(x = X, y = Y)\n\n\nParameters:\n   SVM-Type:  eps-regression \n SVM-Kernel:  radial \n       cost:  1 \n      gamma:  0.3333333 \n    epsilon:  0.1 \n\n\nNumber of Support Vectors:  124\n```\n:::\n:::\n\n\nMake predictions (class probabilities):\n\n\n::: {.cell hash='svm_cache/html/unnamed-chunk-10_ba3ef86da6d364b58d7fd7440e9d2b68'}\n\n```{.r .cell-code}\nhead(predict(sv, newdata = X), n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       1        2        3 \n5.042085 4.711768 4.836291 \n```\n:::\n:::\n\n\n### Python\n\n\n::: {.cell hash='svm_cache/html/unnamed-chunk-11_91546ebb902e64437c6643520de57998'}\n\n```{.python .cell-code}\nfrom sklearn import svm\nfrom sklearn import datasets\nfrom sklearn.preprocessing import scale\niris = datasets.load_iris()\ndata = iris.data\nX = scale(data[:,1:4])\nY = data[:,0]\n\nmodel = svm.SVR().fit(X, Y)\n\n# Make predictions:\n\nmodel.predict(X)[0:10]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narray([5.03583855, 4.69496586, 4.81438855, 4.77951854, 5.10018373,\n       5.29981857, 4.97308737, 4.98199033, 4.63701656, 4.78431078])\n```\n:::\n:::\n\n\n### Julia\n\n\n::: {.cell hash='svm_cache/html/unnamed-chunk-12_6791954748ed4ef27199d391d0df7b2b'}\n\n```{.julia .cell-code}\nimport StatsBase;\nusing MLJ;\nSVM_regressor =  @load NuSVR pkg=LIBSVM;\nusing RDatasets;\nusing DataFrames;\n```\n:::\n\n::: {.cell hash='svm_cache/html/unnamed-chunk-13_40134eceebefd803b420025863acd9ff'}\n\n```{.julia .cell-code}\niris = dataset(\"datasets\", \"iris\");\nX = mapcols(StatsBase.zscore, iris[:, 2:4]);\nY = iris[:, 1];\n```\n:::\n\n\nModel:\n\n\n::: {.cell hash='svm_cache/html/unnamed-chunk-14_d3f0d825b594402fd5ece189a77f4a04'}\n\n```{.julia .cell-code}\nmodel = fit!(machine(SVM_regressor(), X, Y))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntrained Machine; caches model-specific representations of data\n  model: NuSVR(kernel = RadialBasis, …)\n  args: \n    1:\tSource @875 ⏎ Table{AbstractVector{Continuous}}\n    2:\tSource @099 ⏎ AbstractVector{Continuous}\n```\n:::\n:::\n\n\nPredictions:\n\n\n::: {.cell hash='svm_cache/html/unnamed-chunk-15_c2dadd12158141924f59a974dc655070'}\n\n```{.julia .cell-code}\nMLJ.predict(model, X)[1:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5-element Vector{Float64}:\n 5.058471741834634\n 4.6717512552719604\n 4.799641470830148\n 4.75734816087994\n 5.133728219775252\n```\n:::\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}