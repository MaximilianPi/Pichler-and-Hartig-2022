{
  "hash": "49580337c6345904bbc54c2df3d948b4",
  "result": {
    "markdown": "# Random forest\n\n\n\n\n\n\nThe random forest (RF) algorithm is probably one of the most famous ML algorithms, and not without reason. Compared to other well performing algorithms, the RF algorithm has only a few hyper-parameters and because of the bagging and the random sampling of available variables in for the node splits, it has a well working internal complexity adaption.\n\nIn the following, we use the 'ranger' package (@ranger) (Python: 'scikit-learn' (@scikit-learn), Julia: 'MLJ' (@anthony_blaom_2019_3541506)).\n\n## Classification\n\n::: panel-tabset\n### R\n\n\n::: {.cell hash='rf_cache/html/unnamed-chunk-2_918082701fb58df70fecb4261b483faa'}\n\n```{.r .cell-code}\nlibrary(ranger)\nX = iris[,1:4]\nY = iris[,5,drop=FALSE]\ndata = cbind(Y, X)\n\nrf = ranger(Species~., data = data, probability = TRUE, importance = \"impurity\")\n```\n:::\n\n\nShow feature importances:\n\n\n::: {.cell hash='rf_cache/html/unnamed-chunk-3_efb28c8ba91532545ce133cbeb17eb5f'}\n\n```{.r .cell-code}\nimportance(rf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSepal.Length  Sepal.Width Petal.Length  Petal.Width \n    8.175576     1.178026    43.096449    43.261933 \n```\n:::\n:::\n\n\nMake predictions (class probabilities):\n\n\n::: {.cell hash='rf_cache/html/unnamed-chunk-4_3b149e797ce5c29a4bfdd6599093d8dd'}\n\n```{.r .cell-code}\nhead(predict(rf, data = data)$predictions, n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        setosa   versicolor    virginica\n[1,] 1.0000000 0.0000000000 0.0000000000\n[2,] 0.9986389 0.0009166667 0.0004444444\n[3,] 1.0000000 0.0000000000 0.0000000000\n```\n:::\n:::\n\n\n### Python\n\n\n::: {.cell hash='rf_cache/html/unnamed-chunk-5_09dc8ad38ebcc5334c25a313646a4cc7'}\n\n```{.python .cell-code}\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import datasets\nfrom sklearn.preprocessing import scale\niris = datasets.load_iris()\nX = scale(iris.data)\nY = iris.target\n\nmodel = RandomForestClassifier().fit(X, Y)\n```\n:::\n\n\nFeature importance\n\n\n::: {.cell hash='rf_cache/html/unnamed-chunk-6_842384c2f329fff46f7d95a29adda494'}\n\n```{.python .cell-code}\nprint(model.feature_importances_)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0.10290567 0.02364397 0.38585687 0.4875935 ]\n```\n:::\n:::\n\n\nMake predictions:\n\n\n::: {.cell hash='rf_cache/html/unnamed-chunk-7_00bc58d4de07b8bd640fe668223c5fb2'}\n\n```{.python .cell-code}\nmodel.predict_proba(X)[0:10,:]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narray([[1.  , 0.  , 0.  ],\n       [1.  , 0.  , 0.  ],\n       [1.  , 0.  , 0.  ],\n       [1.  , 0.  , 0.  ],\n       [1.  , 0.  , 0.  ],\n       [1.  , 0.  , 0.  ],\n       [1.  , 0.  , 0.  ],\n       [1.  , 0.  , 0.  ],\n       [0.99, 0.  , 0.01],\n       [1.  , 0.  , 0.  ]])\n```\n:::\n:::\n\n\n### Julia\n\n\n::: {.cell hash='rf_cache/html/unnamed-chunk-8_16bbd002baf68315d5a0d054544ecbf6'}\n\n```{.julia .cell-code}\nimport StatsBase;\nusing MLJ;\nRF_classifier = @load RandomForestClassifier pkg=DecisionTree;\nusing RDatasets;\nusing StatsBase;\nusing DataFrames;\n```\n:::\n\n::: {.cell hash='rf_cache/html/unnamed-chunk-9_c8022005916ba78f5115e836e1973f19'}\n\n```{.julia .cell-code}\niris = dataset(\"datasets\", \"iris\");\nX = mapcols(StatsBase.zscore, iris[:, 1:4]);\nY = iris[:, 5];\n```\n:::\n\n\nModels:\n\n\n::: {.cell hash='rf_cache/html/unnamed-chunk-10_e099eec9b2fabb65a50ca3b0d5296c1a'}\n\n```{.julia .cell-code}\nmodel = fit!(machine(RF_classifier(), X, Y))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntrained Machine; caches model-specific representations of data\n  model: RandomForestClassifier(max_depth = -1, …)\n  args: \n    1:\tSource @390 ⏎ Table{AbstractVector{Continuous}}\n    2:\tSource @805 ⏎ AbstractVector{Multiclass{3}}\n```\n:::\n:::\n\n\nFeature importance:\n\n\n::: {.cell hash='rf_cache/html/unnamed-chunk-11_ddf6b3e062c3bc05bcbc5b2a5cc6147b'}\n\n```{.julia .cell-code}\nfeature_importances(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4-element Vector{Pair{Symbol, Float64}}:\n :PetalLength => 0.6973071180941611\n  :PetalWidth => 0.25359114793092297\n :SepalLength => 0.04389338912322112\n  :SepalWidth => 0.005208344851694811\n```\n:::\n:::\n\n\n\nPredictions:\n\n\n::: {.cell hash='rf_cache/html/unnamed-chunk-12_62e490e47e44036b18d4b2c772e0cc2c'}\n\n```{.julia .cell-code}\nMLJ.predict(model, X)[1:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5-element CategoricalDistributions.UnivariateFiniteVector{Multiclass{3}, String, UInt8, Float64}:\n UnivariateFinite{Multiclass{3}}(setosa=>1.0, versicolor=>0.0, virginica=>0.0)\n UnivariateFinite{Multiclass{3}}(setosa=>1.0, versicolor=>0.0, virginica=>0.0)\n UnivariateFinite{Multiclass{3}}(setosa=>1.0, versicolor=>0.0, virginica=>0.0)\n UnivariateFinite{Multiclass{3}}(setosa=>1.0, versicolor=>0.0, virginica=>0.0)\n UnivariateFinite{Multiclass{3}}(setosa=>1.0, versicolor=>0.0, virginica=>0.0)\n```\n:::\n:::\n\n\n:::\n\n## Regression\n\n::: panel-tabset\n### R\n\n\n::: {.cell hash='rf_cache/html/unnamed-chunk-13_659e27d840083428acf500a2df381517'}\n\n```{.r .cell-code}\nlibrary(ranger)\nX = iris[,2:4]\ndata = cbind(iris[,1,drop=FALSE], X)\n\nrf = ranger(Sepal.Length~., data = data, importance = \"impurity\")\n```\n:::\n\n\nShow feature importances:\n\n\n::: {.cell hash='rf_cache/html/unnamed-chunk-14_9093c238f937cdac95b04a47a334e5dd'}\n\n```{.r .cell-code}\nimportance(rf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Sepal.Width Petal.Length  Petal.Width \n    12.17374     45.58927     37.51995 \n```\n:::\n:::\n\n\nMake predictions (class probabilities):\n\n\n::: {.cell hash='rf_cache/html/unnamed-chunk-15_e88ba9d89e12ab5163fd44d8eb9e0a9d'}\n\n```{.r .cell-code}\nhead(predict(rf, data = data)$predictions, n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.108278 4.776606 4.653740\n```\n:::\n:::\n\n\n### Python\n\n\n::: {.cell hash='rf_cache/html/unnamed-chunk-16_2146b8f38f80c82e725a7cbc5fd662cf'}\n\n```{.python .cell-code}\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn import datasets\nfrom sklearn.preprocessing import scale\niris = datasets.load_iris()\ndata = iris.data\nX = scale(data[:,1:4])\nY = data[:,0]\n\nmodel = RandomForestRegressor().fit(X, Y)\n```\n:::\n\n\nFeature importance:\n\n\n::: {.cell hash='rf_cache/html/unnamed-chunk-17_96121b95dc697a1d5236218c1f99ea9f'}\n\n```{.python .cell-code}\nprint(model.feature_importances_)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0.08088907 0.85602898 0.06308195]\n```\n:::\n:::\n\n\nMake predictions:\n\n\n::: {.cell hash='rf_cache/html/unnamed-chunk-18_207cf93719c1d46ca0c7237ec3b799fc'}\n\n```{.python .cell-code}\nmodel.predict(X)[0:10]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narray([5.118     , 4.7942    , 4.58115   , 4.75405   , 5.031     ,\n       5.416     , 4.80333333, 5.05493333, 4.6002    , 4.8445    ])\n```\n:::\n:::\n\n\n### Julia\n\n\n::: {.cell hash='rf_cache/html/unnamed-chunk-19_8eb0c2bd167b2ee8bd0706a5c9e35f87'}\n\n```{.julia .cell-code}\nimport StatsBase;\nusing MLJ;\nRF_regressor = @load RandomForestRegressor pkg=DecisionTree;\nusing RDatasets;\nusing DataFrames;\n```\n:::\n\n::: {.cell hash='rf_cache/html/unnamed-chunk-20_ad64c6063160d21fb6cd429fa1bd812e'}\n\n```{.julia .cell-code}\niris = dataset(\"datasets\", \"iris\");\nX = mapcols(StatsBase.zscore, iris[:, 2:4]);\nY = iris[:, 1];\n```\n:::\n\n\nModel:\n\n\n::: {.cell hash='rf_cache/html/unnamed-chunk-21_95d3492e83b70fceec189cb815c07e1b'}\n\n```{.julia .cell-code}\nmodel = fit!(machine(RF_regressor(), X, Y))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntrained Machine; caches model-specific representations of data\n  model: RandomForestRegressor(max_depth = -1, …)\n  args: \n    1:\tSource @645 ⏎ Table{AbstractVector{Continuous}}\n    2:\tSource @682 ⏎ AbstractVector{Continuous}\n```\n:::\n:::\n\n\nFeature importance:\n\n\n::: {.cell hash='rf_cache/html/unnamed-chunk-22_7605b168d268b508a2bb4450cba77f1f'}\n\n```{.julia .cell-code}\nfeature_importances(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3-element Vector{Pair{Symbol, Float64}}:\n :PetalLength => 0.7388544773497039\n  :PetalWidth => 0.1792108665840036\n  :SepalWidth => 0.08193465606629259\n```\n:::\n:::\n\n\n\nPredictions:\n\n\n::: {.cell hash='rf_cache/html/unnamed-chunk-23_1e7e68bde764c500d785d3274e213a29'}\n\n```{.julia .cell-code}\nMLJ.predict(model, X)[1:5]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n5-element Vector{Float64}:\n 5.17\n 4.640000000000001\n 4.535000000000001\n 4.71\n 5.0\n```\n:::\n:::\n\n\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}