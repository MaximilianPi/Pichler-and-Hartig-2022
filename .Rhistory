rModel = nimbleModel(code, data = data, inits = inits, constants = consts)
code = nimbleCode({
# Sigma
for(i in 1:d) {
for(j in 1:d2) {
LV[i, j] ~ dnorm(0, 1.0)
}
}
Sigma = LV%*%t(LV) + diag(1, 10)
for(i in 1:d) {
mu[i] ~ dnorm(0, 5.0)
}
for(i in 1:n) {
y[i,1:10] ~ dmnorm(mu, cov = Sigma)
}
})
data = list(y = X)
consts = list(d = 10, d2 = 2, n = nrow(X))
inits = list(LV = matrix(rnorm(20, sd= 0.001), 10, 2), mu = rnorm(10))
rModel = nimbleModel(code, data = data, inits = inits, constants = consts)
code = nimbleCode({
# Sigma
for(i in 1:d) {
for(j in 1:d2) {
LV[i, j] ~ dnorm(0, 1.0)
}
}
#Sigma = LV%*%t(LV) + diag(1, 10)
for(i in 1:d) {
mu[i] ~ dnorm(0, 5.0)
}
for(i in 1:n) {
y[i,1:10] ~ dmnorm(mu, cov = LV%*%t(LV) + diag(1, 10))
}
})
data = list(y = X)
consts = list(d = 10, d2 = 2, n = nrow(X))
inits = list(LV = matrix(rnorm(20, sd= 0.001), 10, 2), mu = rnorm(10))
rModel = nimbleModel(code, data = data, inits = inits, constants = consts)
code = nimbleCode({
# Sigma
for(i in 1:d) {
for(j in 1:d2) {
LV[i, j] ~ dnorm(0, 1.0)
}
}
Sigma <- LV%*%t(LV) + diag(1, 10)
for(i in 1:d) {
mu[i] ~ dnorm(0, 5.0)
}
for(i in 1:n) {
y[i,1:10] ~ dmnorm(mu, cov = Sigma)
}
})
data = list(y = X)
consts = list(d = 10, d2 = 2, n = nrow(X))
inits = list(LV = matrix(rnorm(20, sd= 0.001), 10, 2), mu = rnorm(10), Sigma = diag(0, 10))
rModel = nimbleModel(code, data = data, inits = inits, constants = consts)
matrix(rnorm(20, sd= 0.001), 10, 2)
matrix(rnorm(20, sd= 0.001), 10, 2) %*% t(matrix(rnorm(20, sd= 0.001), 10, 2))
X = mvtnorm::rmvnorm(100, mean = rep(0, 10), sigma = diag(1, 10))
code = nimbleCode({
# Sigma
for(i in 1:d) {
for(j in 1:d2) {
LV[i, j] ~ dnorm(0, 1.0)
}
}
Sigma <- LV%*%t(LV)# + diag(1, 10)
for(i in 1:d) {
mu[i] ~ dnorm(0, 5.0)
}
for(i in 1:n) {
y[i,1:10] ~ dmnorm(mu, cov = Sigma)
}
})
data = list(y = X)
consts = list(d = 10, d2 = 2, n = nrow(X))
inits = list(LV = matrix(rnorm(20, sd= 0.001), 10, 2), mu = rnorm(10), Sigma = diag(0, 10))
rModel = nimbleModel(code, data = data, inits = inits, constants = consts)
X = mvtnorm::rmvnorm(100, mean = rep(0, 10), sigma = diag(1, 10))
code = nimbleCode({
# Sigma
for(i in 1:d) {
for(j in 1:d2) {
LV[i, j] ~ dnorm(0, 1.0)
}
}
Sigma <- LV %*% t(LV)# + diag(1, 10)
for(i in 1:d) {
mu[i] ~ dnorm(0, 5.0)
}
for(i in 1:n) {
y[i,1:10] ~ dmnorm(mu, cov = Sigma)
}
})
data = list(y = X)
consts = list(d = 10, d2 = 2, n = nrow(X))
inits = list(LV = matrix(rnorm(20, sd= 0.001), 10, 2), mu = rnorm(10), Sigma = diag(0, 10))
rModel = nimbleModel(code, data = data, inits = inits, constants = consts)
inits = list(LV = matrix(rnorm(20, sd= 0.001), 10, 2), mu = rnorm(10))
rModel = nimbleModel(code, data = data, inits = inits, constants = consts)
code = nimbleCode({
# Sigma
for(i in 1:d) {
for(j in 1:d2) {
LV[i, j] ~ dnorm(0, 1.0)
}
}
Sigma <- LV[1:10,1:2] %*% t(LV[1:10,1:2])# + diag(1, 10)
for(i in 1:d) {
mu[i] ~ dnorm(0, 5.0)
}
for(i in 1:n) {
y[i,1:10] ~ dmnorm(mu, cov = Sigma)
}
})
data = list(y = X)
consts = list(d = 10, d2 = 2, n = nrow(X))
inits = list(LV = matrix(rnorm(20, sd= 0.001), 10, 2), mu = rnorm(10), Sigma = diag(0, 10))
rModel = nimbleModel(code, data = data, inits = inits, constants = consts)
code = nimbleCode({
# Sigma
for(i in 1:d) {
for(j in 1:d2) {
LV[i, j] ~ dnorm(0, 1.0)
}
}
Sigma <- LV[1:10,1:2] %*% t(LV[1:10,1:2])# + diag(1, 10)
for(i in 1:d) {
mu[i] ~ dnorm(0, 5.0)
}
for(i in 1:n) {
y[i,1:10] ~ dmnorm(mu[1:10], cov = Sigma)
}
})
data = list(y = X)
consts = list(d = 10, d2 = 2, n = nrow(X))
inits = list(LV = matrix(rnorm(20, sd= 0.001), 10, 2), mu = rnorm(10), Sigma = diag(0, 10))
rModel = nimbleModel(code, data = data, inits = inits, constants = consts)
code = nimbleCode({
# Sigma
for(i in 1:d) {
for(j in 1:d2) {
LV[i, j] ~ dnorm(0, 1.0)
}
}
Sigma <- LV[1:10,1:2] %*% t(LV[1:10,1:2])# + diag(1, 10)
for(i in 1:d) {
mu[i] ~ dnorm(0, 5.0)
}
for(i in 1:n) {
y[i,1:10] ~ dmnorm(mu[1:10], cov = Sigma[1:10, 1:10])
}
})
data = list(y = X)
consts = list(d = 10, d2 = 2, n = nrow(X))
inits = list(LV = matrix(rnorm(20, sd= 0.001), 10, 2), mu = rnorm(10), Sigma = diag(0, 10))
rModel = nimbleModel(code, data = data, inits = inits, constants = consts)
diag(0, 10)
inits = list(LV = matrix(rnorm(20, sd= 0.001), 10, 2), mu = rnorm(10), Sigma = diag(0, 10))
rModel = nimbleModel(code, data = data, inits = inits, constants = consts)
code = nimbleCode({
# Sigma
for(i in 1:d) {
for(j in 1:d2) {
LV[i, j] ~ dnorm(0, 1.0)
}
}
Sigma[1:10, 1:10] <- LV[1:10,1:2] %*% t(LV[1:10,1:2])# + diag(1, 10)
for(i in 1:d) {
mu[i] ~ dnorm(0, 5.0)
}
for(i in 1:n) {
y[i,1:10] ~ dmnorm(mu[1:10], cov = Sigma[1:10, 1:10])
}
})
data = list(y = X)
consts = list(d = 10, d2 = 2, n = nrow(X))
inits = list(LV = matrix(rnorm(20, sd= 0.001), 10, 2), mu = rnorm(10), Sigma = diag(0, 10))
rModel = nimbleModel(code, data = data, inits = inits, constants = consts)
X = mvtnorm::rmvnorm(100, mean = rep(0, 10), sigma = diag(1, 10))
code = nimbleCode({
# Sigma
for(i in 1:d) {
for(j in 1:d2) {
LV[i, j] ~ dnorm(0, 1.0)
}
}
Sigma[1:10, 1:10] <- LV[1:10,1:2] %*% t(LV[1:10,1:2]) + diag(1, 10)[1:10, 1:10]
for(i in 1:d) {
mu[i] ~ dnorm(0, 5.0)
}
for(i in 1:n) {
y[i,1:10] ~ dmnorm(mu[1:10], cov = Sigma[1:10, 1:10])
}
})
data = list(y = X)
consts = list(d = 10, d2 = 2, n = nrow(X))
inits = list(LV = matrix(rnorm(20, sd= 0.001), 10, 2), mu = rnorm(10), Sigma = diag(0, 10))
rModel = nimbleModel(code, data = data, inits = inits, constants = consts)
mcmc = buildMCMC(rModel)
Cmcmc = compileNimble(mcmc)
Cmodel = compileNimble(rModel)
printErrors()
code = nimbleCode({
# Sigma
for(i in 1:d) {
for(j in 1:d2) {
LV[i, j] ~ dnorm(0, 1.0)
}
}
Sigma[1:10, 1:10] <- LV[1:10,1:2] %*% t(LV[1:10,1:2]) + DD[1:10, 1:10]
for(i in 1:d) {
mu[i] ~ dnorm(0, 5.0)
}
for(i in 1:n) {
y[i,1:10] ~ dmnorm(mu[1:10], cov = Sigma[1:10, 1:10])
}
})
data = list(y = X)
consts = list(d = 10, d2 = 2, n = nrow(X), DD = diag(1, 10))
inits = list(LV = matrix(rnorm(20, sd= 0.001), 10, 2), mu = rnorm(10), Sigma = diag(0, 10))
rModel = nimbleModel(code, data = data, inits = inits, constants = consts)
mcmc = buildMCMC(rModel)
Cmodel = compileNimble(rModel)
Cmcmc = compileNimble(mcmc)
samples = runMCMC(Cmcmc)
mcmc_samples = nimbleMCMC(code, data = data, inits = inits, constants = consts, nburnin = 1000, niter = 3000)
head(mcmc_samples)
mcmc_samples[,1:20]
apply(mcmc_samples[,1:20], 2, mean)
matrix(apply(mcmc_samples[,1:20], 2, mean), 10, 2)
LV = matrix(apply(mcmc_samples[,1:20], 2, mean), 10, 2)
LV %*% t(LV) + diag(1, 10)
apply(mcmc_samples[,21:30], 2, mean)
plot(nimbleMCMC_samples[ , 'mu1'], type = 'l', xlab = 'iteration',
ylab = expression(alpha))
plot(mcmc_samples[ , 'mu1'], type = 'l', xlab = 'iteration')
plot(mcmc_samples[ , 'mu[1]'], type = 'l', xlab = 'iteration')
install.packages("DirichletReg")
library(DirichletReg)
DirichletReg::rdirichlet(2, c(0.3, 0.5))
DirichletReg::rdirichlet(2, c(0.3, 0.5))
DirichletReg::rdirichlet(2, c(0.3, 0.5))
DirichletReg::rdirichlet(2, c(0.3, 0.5))
DirichletReg::rdirichlet(2, c(0.3, 0.5))
DirichletReg::rdirichlet(2, c(0.3, 0.5)*10)
DirichletReg::rdirichlet(2, c(0.3, 0.5)*10)
DirichletReg::rdirichlet(2, c(0.3, 0.5)*10)
DirichletReg::rdirichlet(2, c(0.3, 0.5)*10)
DirichletReg::rdirichlet(2, c(0.3, 0.5)*10)
DirichletReg::rdirichlet(2, rgamma(1,1))
DirichletReg::rdirichlet(2, rgamma(1,1))
DirichletReg::rdirichlet(10, rgamma(1,1))
DirichletReg::rdirichlet(10, rgamma(1,1))
rgamma(1,1)
rgamma(1,1)
rgamma(1,1)
DirichletReg::rdirichlet(2, c(0.3, 0.5)*10)
DirichletReg::rdirichlet(2, c(0.3, 0.5)*10)
DirichletReg::rdirichlet(1, c(0.3, 0.5)*10)
DirichletReg::rdirichlet(1, c(0.3, 0.5)*10)
sum(DirichletReg::rdirichlet(1, c(0.3, 0.5)*10))
DirichletReg::rdirichlet(1, c(0.3, 0.5)*10)
DirichletReg::rdirichlet(1, c(0.3, 0.5)*10)
DirichletReg::rdirichlet(1, c(0.3, 0.5, 0.1)*10)
code = nimbleCode({
# Sigma
for(i in 1:d) {
for(j in 1:d2) {
LV[i, j] ~ dnorm(0, 1.0)
}
}
alpha ~ dgamma(1,1)
vv[1:d2] ~ dCRP(alpha, size = d2)
for(i in 1:d2) {
LV[1:d,i] <- LV[1:d,i]*vv[i]
}
Sigma[1:10, 1:10] <- LV[1:10,1:d2] %*% t(LV[1:10,1:2]) + DD[1:10, 1:10]
for(i in 1:d) {
mu[i] ~ dnorm(0, 5.0)
}
for(i in 1:n) {
y[i,1:10] ~ dmnorm(mu[1:10], cov = Sigma[1:10, 1:10])
}
})
data = list(y = X)
consts = list(d = 10, d2 = 2, n = nrow(X), DD = diag(1, 10))
inits = list(LV = matrix(rnorm(20, sd= 0.001), 10, 2), mu = rnorm(10), Sigma = diag(0, 10), alpha = runif(10), vv = runif(10))
mcmc_samples = nimbleMCMC(code, data = data, inits = inits, constants = consts, nburnin = 1000, niter = 3000)
code = nimbleCode({
# Sigma
for(i in 1:d) {
for(j in 1:d2) {
LV[i, j] ~ dnorm(0, 1.0)
}
}
alpha ~ dgamma(1,1)
vv[1:d2] ~ dCRP(alpha[1:10], size = d2)
for(i in 1:d2) {
LV[1:d,i] <- LV[1:d,i]*vv[i]
}
Sigma[1:10, 1:10] <- LV[1:10,1:d2] %*% t(LV[1:10,1:2]) + DD[1:10, 1:10]
for(i in 1:d) {
mu[i] ~ dnorm(0, 5.0)
}
for(i in 1:n) {
y[i,1:10] ~ dmnorm(mu[1:10], cov = Sigma[1:10, 1:10])
}
})
data = list(y = X)
consts = list(d = 10, d2 = 2, n = nrow(X), DD = diag(1, 10))
inits = list(LV = matrix(rnorm(20, sd= 0.001), 10, 2), mu = rnorm(10), Sigma = diag(0, 10), alpha = runif(10), vv = runif(10))
mcmc_samples = nimbleMCMC(code, data = data, inits = inits, constants = consts, nburnin = 1000, niter = 3000)
code = nimbleCode({
# Sigma
for(i in 1:d) {
for(j in 1:d2) {
LV[i, j] ~ dnorm(0, 1.0)
}
}
alpha[1:10] ~ dgamma(1,1)
vv[1:d2] ~ dCRP(alpha[1:10], size = d2)
for(i in 1:d2) {
LV[1:d,i] <- LV[1:d,i]*vv[i]
}
Sigma[1:10, 1:10] <- LV[1:10,1:d2] %*% t(LV[1:10,1:2]) + DD[1:10, 1:10]
for(i in 1:d) {
mu[i] ~ dnorm(0, 5.0)
}
for(i in 1:n) {
y[i,1:10] ~ dmnorm(mu[1:10], cov = Sigma[1:10, 1:10])
}
})
data = list(y = X)
consts = list(d = 10, d2 = 2, n = nrow(X), DD = diag(1, 10))
inits = list(LV = matrix(rnorm(20, sd= 0.001), 10, 2), mu = rnorm(10), Sigma = diag(0, 10), alpha = runif(10), vv = runif(10))
mcmc_samples = nimbleMCMC(code, data = data, inits = inits, constants = consts, nburnin = 1000, niter = 3000)
code = nimbleCode({
# Sigma
for(i in 1:d) {
for(j in 1:d2) {
LV[i, j] ~ dnorm(0, 1.0)
}
}
alpha[1:10] ~ dgamma(1,1)
vv[1:d2] ~ dCRP(alpha[1:10], size = d2)
for(i in 1:d2) {
LV2[1:d,i] <- LV[1:d,i]*vv[i]
}
Sigma[1:10, 1:10] <- LV2[1:10,1:d2] %*% t(LV2[1:10,1:2]) + DD[1:10, 1:10]
for(i in 1:d) {
mu[i] ~ dnorm(0, 5.0)
}
for(i in 1:n) {
y[i,1:10] ~ dmnorm(mu[1:10], cov = Sigma[1:10, 1:10])
}
})
data = list(y = X)
consts = list(d = 10, d2 = 10, n = nrow(X), DD = diag(1, 10))
inits = list(LV = matrix(rnorm(100, sd= 0.001), 10, 10),
LV2 = matrix(0, 10, 10),
mu = rnorm(10),
Sigma = diag(0, 10),
alpha = runif(10),
vv = runif(10))
mcmc_samples = nimbleMCMC(code, data = data, inits = inits, constants = consts, nburnin = 1000, niter = 3000)
code = nimbleCode({
# Sigma
for(i in 1:d) {
for(j in 1:d2) {
LV[i, j] ~ dnorm(0, 1.0)
}
}
alpha[1:10] ~ dgamma(1,1)
vv[1:d2] ~ dCRP(alpha[1:10], size = d2)
for(i in 1:d2) {
LV2[1:d,i] <- LV[1:d,i]*vv[i]
}
Sigma[1:10, 1:10] <- LV2[1:10,1:d2] %*% t(LV2[1:10,1:d2]) + DD[1:10, 1:10]
for(i in 1:d) {
mu[i] ~ dnorm(0, 5.0)
}
for(i in 1:n) {
y[i,1:10] ~ dmnorm(mu[1:10], cov = Sigma[1:10, 1:10])
}
})
data = list(y = X)
consts = list(d = 10, d2 = 10, n = nrow(X), DD = diag(1, 10))
inits = list(LV = matrix(rnorm(100, sd= 0.001), 10, 10),
LV2 = matrix(0, 10, 10),
mu = rnorm(10),
Sigma = diag(0, 10),
alpha = runif(10),
vv = runif(10))
mcmc_samples = nimbleMCMC(code, data = data, inits = inits, constants = consts, nburnin = 1000, niter = 3000)
X = mvtnorm::rmvnorm(100, mean = rep(0, 10), sigma = diag(1, 10))
code = nimbleCode({
# Sigma
for(i in 1:d) {
for(j in 1:d2) {
LV[i, j] ~ dnorm(0, 1.0)
}
}
for(i in 1:d2) { alpha[i] ~ dgamma(1,1) }
vv[1:d2] ~ dCRP(alpha[1:10], size = d2)
for(i in 1:d2) {
LV2[1:d,i] <- LV[1:d,i]*vv[i]
}
Sigma[1:10, 1:10] <- LV2[1:10,1:d2] %*% t(LV2[1:10,1:d2]) + DD[1:10, 1:10]
for(i in 1:d) {
mu[i] ~ dnorm(0, 5.0)
}
for(i in 1:n) {
y[i,1:10] ~ dmnorm(mu[1:10], cov = Sigma[1:10, 1:10])
}
})
data = list(y = X)
consts = list(d = 10, d2 = 10, n = nrow(X), DD = diag(1, 10))
inits = list(LV = matrix(rnorm(100, sd= 0.001), 10, 10),
LV2 = matrix(0, 10, 10),
mu = rnorm(10),
Sigma = diag(0, 10),
alpha = runif(10),
vv = runif(10))
mcmc_samples = nimbleMCMC(code, data = data, inits = inits, constants = consts, nburnin = 1000, niter = 3000)
code = nimbleCode({
# Sigma
for(i in 1:d) {
for(j in 1:d2) {
LV[i, j] ~ dnorm(0, 1.0)
}
}
alpha ~ dgamma(1,1)
vv[1:d2] ~ dCRP(alpha, size = d2)
for(i in 1:d2) {
LV2[1:d,i] <- LV[1:d,i]*vv[i]
}
Sigma[1:10, 1:10] <- LV2[1:10,1:d2] %*% t(LV2[1:10,1:d2]) + DD[1:10, 1:10]
for(i in 1:d) {
mu[i] ~ dnorm(0, 5.0)
}
for(i in 1:n) {
y[i,1:10] ~ dmnorm(mu[1:10], cov = Sigma[1:10, 1:10])
}
})
data = list(y = X)
consts = list(d = 10, d2 = 10, n = nrow(X), DD = diag(1, 10))
inits = list(LV = matrix(rnorm(100, sd= 0.001), 10, 10),
LV2 = matrix(0, 10, 10),
mu = rnorm(10),
Sigma = diag(0, 10),
alpha = 0.4,
vv = runif(10))
mcmc_samples = nimbleMCMC(code, data = data, inits = inits, constants = consts, nburnin = 1000, niter = 3000)
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
install.packages(c("knitr", "flextable", "kknn", "e1071"), Ncpus = 10)
install.packages(c("knitr", "flextable", "kknn", "e1071"), Ncpus = 10)
install.packages("sjSDM")
install.packages("quarto", Ncpus = 10)
install.packages(c( "keras", "xgboost", "ranger"), Ncpus = 10)
library(sjSDM)
sjSDM::install_sjSDM()
reticulate::conda_install("r-sjSDM", packages = "py-xgboost")
reticulate::conda_install("r-sjsdm", packages = "py-xgboost")
reticulate::conda_install("r-sjsdm", packages = "sklearn", pip = TRUE)
install.packages("glmnet")
install.packages("JuliaCall")
library(JuliaCall)
JuliaCall::install_julia()
JuliaCall::julia_setup()
#library(flextable)
#set_flextable_defaults(fonts_ignore=TRUE)
queries = c(
'("artificial neural network" OR "deep neural network" OR
"multi-layer perceptron" OR "fully connected neural network")',
'("convolutional neural network" OR "object detection")',
'("recurrent neural network")',
'("graph neural network" OR "graph convolutional")',
'("random forest")',
'("boosted regression tree" OR "boosted reg" OR
"gradient boosting" OR "adaboost")',
'("k-nearest-neighbor")',
'("ridge regression" OR "lasso regression" OR
"elastic-net" OR "elastic net")',
'("support vector machine" OR "support vector")'
)
algorithms = c(
"Deep neural network (ANN)",
"Convolutional neural network (CNN)",
"Recurrent neural network (RNN)",
"Graph neural network (GNN)",
"Random Forest (RF)",
"Boosted Regression Trees (BRT)",
"k-nearest neighbor (kNN)",
"Ridge, lasso, or elastic-net regression",
"Support vector machine (SVM)"
)
data = data.frame(cbind(queries, algorithms))
colnames(data) = c("Queries", "ML and DL algorithm")
knitr::kable(data)
install.packages("coro")
library(JuliaCall)
JuliaCall::julia_install_package("MLJ")
JuliaCall::julia_setup()
library(quarto)
quarto::quarto_render("ML_Introduction/")
quarto::quarto_render("ML_Introduction/")
quarto::quarto_render("ML_Introduction/",output_file = "docs/")
quarto::quarto_render("ML_Introduction/")
quarto::quarto_render("ML_Introduction/")
