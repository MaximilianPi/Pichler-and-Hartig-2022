# abline(lm(predict(m2, newdata=df[H:N, ])~Y[H:N]), col = "red")
# abline(lm(predict(m3, newx=as.matrix(df[H:N,2:3 ]))[,1]~Y[H:N]), col = "green")
# abline(a = c(0,1), col= "green")
sapply(list( predict(m1, newdata=df[H:N, ]),
predict(m2, newdata=df[H:N, ]),
predict(m3, newdata=df[H:N, ]),
predict(m4, newx=as.matrix(df[H:N,2:3 ]))[,1]  ), function(p) cor(p, Y[H:N] ))
mean(apply(predict(m1, newdata=df[H:N, ], interval="confidence")[,2:3], 1, diff))
mean(apply(predict(m2, newdata=df[H:N, ], interval="confidence")[,2:3], 1, diff))
mean(apply(predict(m3, newdata=df[H:N, ], interval="confidence")[,2:3], 1, diff))
RMSE = function(p, true) sqrt(mean((true-p)**2))
sapply(list( predict(m1, newdata=df[H:N, ]),
predict(m2, newdata=df[H:N, ]),
predict(m3, newdata=df[H:N, ]),
predict(m4, newx=as.matrix(df[H:N,2:3 ]))[,1]  ), function(p) RMSE(p, Y[H:N] ))
N = 500
Con = runif(N, -0.2, 0.2)
X = 1*Con + rnorm(N, sd = 0.01)
X2 = runif(N, -0.2, 0.2)
W = matrix(runif(50*N, -0.2, 0.2), N, 50)
Y = 0.5*X - 1.5*Con +  rnorm(N, sd = 0.1)
df = data.frame(Y= Y, X = X, Con=Con, X2 = X2)
H = 20
m1 = lm(Y~X+Con, data = df[1:(H-1),])
m2 = lm(Y~X, data = df[1:(H-1),])
m3 = lm(Y~Con, data = df[1:(H-1),])
m4 = glmnet(as.matrix(df[1:(H-1),2:3]), df[1:(H-1),1], lambda = 0.01)
RMSE = function(p, true) sqrt(mean((true-p)**2))
sapply(list( predict(m1, newdata=df[H:N, ]),
predict(m2, newdata=df[H:N, ]),
predict(m3, newdata=df[H:N, ]),
predict(m4, newx=as.matrix(df[H:N,2:3 ]))[,1]  ), function(p) RMSE(p, Y[H:N] ))
N = 500
Con = runif(N, -0.2, 0.2)
X = 1*Con + rnorm(N, sd = 0.01)
X2 = runif(N, -0.2, 0.2)
W = matrix(runif(50*N, -0.2, 0.2), N, 50)
Y = 0.5*X - 1.5*Con +  rnorm(N, sd = 0.1)
df = data.frame(Y= Y, X = X, Con=Con, X2 = X2)
H = 20
m1 = lm(Y~X+Con, data = df[1:(H-1),])
m2 = lm(Y~X, data = df[1:(H-1),])
m3 = lm(Y~Con, data = df[1:(H-1),])
m4 = glmnet(as.matrix(df[1:(H-1),2:3]), df[1:(H-1),1], lambda = 0.01)
RMSE = function(p, true) sqrt(mean((true-p)**2))
sapply(list( predict(m1, newdata=df[H:N, ]),
predict(m2, newdata=df[H:N, ]),
predict(m3, newdata=df[H:N, ]),
predict(m4, newx=as.matrix(df[H:N,2:3 ]))[,1]  ), function(p) RMSE(p, Y[H:N] ))
N = 500
Con = runif(N, -0.2, 0.2)
X = 1*Con + rnorm(N, sd = 0.01)
X2 = runif(N, -0.2, 0.2)
W = matrix(runif(50*N, -0.2, 0.2), N, 50)
Y = 0.5*X - 1.5*Con +  rnorm(N, sd = 0.1)
df = data.frame(Y= Y, X = X, Con=Con, X2 = X2)
H = 20
m1 = lm(Y~X+Con, data = df[1:(H-1),])
m2 = lm(Y~X, data = df[1:(H-1),])
m3 = lm(Y~Con, data = df[1:(H-1),])
m4 = glmnet(as.matrix(df[1:(H-1),2:3]), df[1:(H-1),1], lambda = 0.01)
RMSE = function(p, true) sqrt(mean((true-p)**2))
sapply(list( predict(m1, newdata=df[H:N, ]),
predict(m2, newdata=df[H:N, ]),
predict(m3, newdata=df[H:N, ]),
predict(m4, newx=as.matrix(df[H:N,2:3 ]))[,1]  ), function(p) RMSE(p, Y[H:N] ))
N = 500
Con = runif(N, -0.2, 0.2)
X = 1*Con + rnorm(N, sd = 0.01)
X2 = runif(N, -0.2, 0.2)
W = matrix(runif(50*N, -0.2, 0.2), N, 50)
Y = 0.5*X - 1.5*Con +  rnorm(N, sd = 0.1)
df = data.frame(Y= Y, X = X, Con=Con, X2 = X2)
H = 20
m1 = lm(Y~X+Con, data = df[1:(H-1),])
m2 = lm(Y~X, data = df[1:(H-1),])
m3 = lm(Y~Con, data = df[1:(H-1),])
m4 = glmnet(as.matrix(df[1:(H-1),2:3]), df[1:(H-1),1], lambda = 0.01)
RMSE = function(p, true) sqrt(mean((true-p)**2))
sapply(list( predict(m1, newdata=df[H:N, ]),
predict(m2, newdata=df[H:N, ]),
predict(m3, newdata=df[H:N, ]),
predict(m4, newx=as.matrix(df[H:N,2:3 ]))[,1]  ), function(p) RMSE(p, Y[H:N] ))
N = 500
Con = runif(N, -0.2, 0.2)
X = 1*Con + rnorm(N, sd = 0.01)
X2 = runif(N, -0.2, 0.2)
W = matrix(runif(50*N, -0.2, 0.2), N, 50)
Y = 0.5*X - 1.5*Con +  rnorm(N, sd = 0.1)
df = data.frame(Y= Y, X = X, Con=Con, X2 = X2)
H = 20
m1 = lm(Y~X+Con, data = df[1:(H-1),])
m2 = lm(Y~X, data = df[1:(H-1),])
m3 = lm(Y~Con, data = df[1:(H-1),])
m4 = glmnet(as.matrix(df[1:(H-1),2:3]), df[1:(H-1),1], lambda = 0.01)
RMSE = function(p, true) sqrt(mean((true-p)**2))
sapply(list( predict(m1, newdata=df[H:N, ]),
predict(m2, newdata=df[H:N, ]),
predict(m3, newdata=df[H:N, ]),
predict(m4, newx=as.matrix(df[H:N,2:3 ]))[,1]  ), function(p) RMSE(p, Y[H:N] ))
N = 500
Con = runif(N, -0.2, 0.2)
X = 1*Con + rnorm(N, sd = 0.01)
X2 = runif(N, -0.2, 0.2)
W = matrix(runif(50*N, -0.2, 0.2), N, 50)
Y = 0.5*X - 1.5*Con +  rnorm(N, sd = 0.1)
df = data.frame(Y= Y, X = X, Con=Con, X2 = X2)
H = 20
m1 = lm(Y~X+Con, data = df[1:(H-1),])
m2 = lm(Y~X, data = df[1:(H-1),])
m3 = lm(Y~Con, data = df[1:(H-1),])
m4 = glmnet(as.matrix(df[1:(H-1),2:3]), df[1:(H-1),1], lambda = 0.01)
RMSE = function(p, true) sqrt(mean((true-p)**2))
sapply(list( predict(m1, newdata=df[H:N, ]),
predict(m2, newdata=df[H:N, ]),
predict(m3, newdata=df[H:N, ]),
predict(m4, newx=as.matrix(df[H:N,2:3 ]))[,1]  ), function(p) RMSE(p, Y[H:N] ))
N = 500
Con = runif(N, -0.2, 0.2)
X = 1*Con + rnorm(N, sd = 0.01)
X2 = runif(N, -0.2, 0.2)
W = matrix(runif(50*N, -0.2, 0.2), N, 50)
Y = 0.5*X - 1.5*Con +  rnorm(N, sd = 0.1)
df = data.frame(Y= Y, X = X, Con=Con, X2 = X2)
H = 20
m1 = lm(Y~X+Con, data = df[1:(H-1),])
m2 = lm(Y~X, data = df[1:(H-1),])
m3 = lm(Y~Con, data = df[1:(H-1),])
m4 = glmnet(as.matrix(df[1:(H-1),2:3]), df[1:(H-1),1], lambda = 0.01)
RMSE = function(p, true) sqrt(mean((true-p)**2))
sapply(list( predict(m1, newdata=df[H:N, ]),
predict(m2, newdata=df[H:N, ]),
predict(m3, newdata=df[H:N, ]),
predict(m4, newx=as.matrix(df[H:N,2:3 ]))[,1]  ), function(p) RMSE(p, Y[H:N] ))
N = 500
Con = runif(N, -0.2, 0.2)
X = 1*Con + rnorm(N, sd = 0.01)
X2 = runif(N, -0.2, 0.2)
W = matrix(runif(50*N, -0.2, 0.2), N, 50)
Y = 0.5*X - 1.5*Con +  rnorm(N, sd = 0.1)
df = data.frame(Y= Y, X = X, Con=Con, X2 = X2)
H = 20
m1 = lm(Y~X+Con, data = df[1:(H-1),])
m2 = lm(Y~X, data = df[1:(H-1),])
m3 = lm(Y~Con, data = df[1:(H-1),])
m4 = glmnet(as.matrix(df[1:(H-1),2:3]), df[1:(H-1),1], lambda = 0.01)
RMSE = function(p, true) sqrt(mean((true-p)**2))
sapply(list( predict(m1, newdata=df[H:N, ]),
predict(m2, newdata=df[H:N, ]),
predict(m3, newdata=df[H:N, ]),
predict(m4, newx=as.matrix(df[H:N,2:3 ]))[,1]  ), function(p) RMSE(p, Y[H:N] ))
N = 500
Con = runif(N, -0.2, 0.2)
X = 1*Con + rnorm(N, sd = 0.01)
X2 = runif(N, -0.2, 0.2)
W = matrix(runif(50*N, -0.2, 0.2), N, 50)
Y = 0.5*X - 1.5*Con +  rnorm(N, sd = 0.1)
df = data.frame(Y= Y, X = X, Con=Con, X2 = X2)
H = 20
m1 = lm(Y~X+Con, data = df[1:(H-1),])
m2 = lm(Y~X, data = df[1:(H-1),])
m3 = lm(Y~Con, data = df[1:(H-1),])
m4 = glmnet(as.matrix(df[1:(H-1),2:3]), df[1:(H-1),1], lambda = 0.01)
RMSE = function(p, true) sqrt(mean((true-p)**2))
sapply(list( predict(m1, newdata=df[H:N, ]),
predict(m2, newdata=df[H:N, ]),
predict(m3, newdata=df[H:N, ]),
predict(m4, newx=as.matrix(df[H:N,2:3 ]))[,1]  ), function(p) RMSE(p, Y[H:N] ))
N = 500
Con = runif(N, -0.2, 0.2)
X = 1*Con + rnorm(N, sd = 0.01)
X2 = runif(N, -0.2, 0.2)
W = matrix(runif(50*N, -0.2, 0.2), N, 50)
Y = 0.5*X - 1.5*Con +  rnorm(N, sd = 0.1)
df = data.frame(Y= Y, X = X, Con=Con, X2 = X2)
H = 20
m1 = lm(Y~X+Con, data = df[1:(H-1),])
m2 = lm(Y~X, data = df[1:(H-1),])
m3 = lm(Y~Con, data = df[1:(H-1),])
m4 = glmnet(as.matrix(df[1:(H-1),2:3]), df[1:(H-1),1], lambda = 0.01)
RMSE = function(p, true) sqrt(mean((true-p)**2))
sapply(list( predict(m1, newdata=df[H:N, ]),
predict(m2, newdata=df[H:N, ]),
predict(m3, newdata=df[H:N, ]),
predict(m4, newx=as.matrix(df[H:N,2:3 ]))[,1]  ), function(p) RMSE(p, Y[H:N] ))
set.seed(4)
N = 500
Con = runif(N, -0.2, 0.2)
X = 1*Con + rnorm(N, sd = 0.01)
X2 = runif(N, -0.2, 0.2)
W = matrix(runif(50*N, -0.2, 0.2), N, 50)
Y = 0.5*X - 1.5*Con +  rnorm(N, sd = 0.1)
df = data.frame(Y= Y, X = X, Con=Con)
H = 20
m1 = lm(Y~X+Con, data = df[1:(H-1),])
m2 = lm(Y~X, data = df[1:(H-1),])
m3 = lm(Y~Con, data = df[1:(H-1),])
m4 = glmnet(as.matrix(df[1:(H-1),2:3]), df[1:(H-1),1], lambda = 0.01)
RMSE = function(p, true) sqrt(mean((true-p)**2))
sapply(list( predict(m1, newdata=df[H:N, ]),
predict(m2, newdata=df[H:N, ]),
predict(m3, newdata=df[H:N, ]),
predict(m4, newx=as.matrix(df[H:N,2:3 ]))[,1]  ), function(p) RMSE(p, Y[H:N] ))
set.seed(4)
N = 500
Con = runif(N, -0.2, 0.2)
X = 1*Con + rnorm(N, sd = 0.01)
X2 = runif(N, -0.2, 0.2)
W = matrix(runif(50*N, -0.2, 0.2), N, 50)
Y = 0.5*X - 1.5*Con +  rnorm(N, sd = 0.1)
df = data.frame(Y= Y, X = X, Con=Con)
H = 20
m1 = lm(Y~X+Con, data = df[1:(H-1),])
m2 = lm(Y~X, data = df[1:(H-1),])
m3 = lm(Y~Con, data = df[1:(H-1),])
m4 = glmnet(as.matrix(df[1:(H-1),2:3]), df[1:(H-1),1], lambda = 0.01)
RMSE = function(p, true) sqrt(mean((true-p)**2))
sapply(list( predict(m1, newdata=df[H:N, ]),
predict(m2, newdata=df[H:N, ]),
predict(m3, newdata=df[H:N, ]),
predict(m4, newx=as.matrix(df[H:N,2:3 ]))[,1]  ), function(p) RMSE(p, Y[H:N] ))
set.seed(4)
N = 500
Con = runif(N, -0.2, 0.2)
X = 1*Con + rnorm(N, sd = 0.01)
X2 = runif(N, -0.2, 0.2)
W = matrix(runif(50*N, -0.2, 0.2), N, 50)
Y = 0.5*X - 1.5*Con +  rnorm(N, sd = 0.1)
df = data.frame(Y= Y, X = X, Con=Con)
H = 20
m1 = lm(Y~X+Con, data = df[1:(H-1),])
m2 = lm(Y~X, data = df[1:(H-1),])
m3 = lm(Y~Con, data = df[1:(H-1),])
m4 = glmnet(as.matrix(df[1:(H-1),2:3]), df[1:(H-1),1], lambda = 0.01)
RMSE = function(p, true) sqrt(mean((true-p)**2))
sapply(list( predict(m1, newdata=df[H:N, ]),
predict(m2, newdata=df[H:N, ]),
predict(m3, newdata=df[H:N, ]),
predict(m4, newx=as.matrix(df[H:N,2:3 ]))[,1]  ), function(p) RMSE(p, Y[H:N] ))
results =
sapply(1:1000, function(kk)) {
N = 500
Con = runif(N, -0.2, 0.2)
X = 1*Con + rnorm(N, sd = 0.01)
X2 = runif(N, -0.2, 0.2)
W = matrix(runif(50*N, -0.2, 0.2), N, 50)
Y = 0.5*X - 1.5*Con +  rnorm(N, sd = 0.1)
df = data.frame(Y= Y, X = X, Con=Con)
H = 20
m1 = lm(Y~X+Con, data = df[1:(H-1),])
m2 = lm(Y~X, data = df[1:(H-1),])
m3 = lm(Y~Con, data = df[1:(H-1),])
m4 = glmnet(as.matrix(df[1:(H-1),2:3]), df[1:(H-1),1], lambda = 0.01)
return(sapply(list( predict(m1, newdata=df[H:N, ]),
predict(m2, newdata=df[H:N, ]),
predict(m3, newdata=df[H:N, ]),
predict(m4, newx=as.matrix(df[H:N,2:3 ]))[,1]  ), function(p) RMSE(p, Y[H:N] )))
}
results =
sapply(1:1000, function(kk)) {
N = 500
Con = runif(N, -0.2, 0.2)
X = 1*Con + rnorm(N, sd = 0.01)
X2 = runif(N, -0.2, 0.2)
W = matrix(runif(50*N, -0.2, 0.2), N, 50)
Y = 0.5*X - 1.5*Con +  rnorm(N, sd = 0.1)
df = data.frame(Y= Y, X = X, Con=Con)
H = 20
m1 = lm(Y~X+Con, data = df[1:(H-1),])
m2 = lm(Y~X, data = df[1:(H-1),])
m3 = lm(Y~Con, data = df[1:(H-1),])
m4 = glmnet(as.matrix(df[1:(H-1),2:3]), df[1:(H-1),1], lambda = 0.01)
return(sapply(list( predict(m1, newdata=df[H:N, ]),
predict(m2, newdata=df[H:N, ]),
predict(m3, newdata=df[H:N, ]),
predict(m4, newx=as.matrix(df[H:N,2:3 ]))[,1]  ), function(p) RMSE(p, Y[H:N] )))
})
results =
sapply(1:1000, function(kk) {
N = 500
Con = runif(N, -0.2, 0.2)
X = 1*Con + rnorm(N, sd = 0.01)
X2 = runif(N, -0.2, 0.2)
W = matrix(runif(50*N, -0.2, 0.2), N, 50)
Y = 0.5*X - 1.5*Con +  rnorm(N, sd = 0.1)
df = data.frame(Y= Y, X = X, Con=Con)
H = 20
m1 = lm(Y~X+Con, data = df[1:(H-1),])
m2 = lm(Y~X, data = df[1:(H-1),])
m3 = lm(Y~Con, data = df[1:(H-1),])
m4 = glmnet(as.matrix(df[1:(H-1),2:3]), df[1:(H-1),1], lambda = 0.01)
return(sapply(list( predict(m1, newdata=df[H:N, ]),
predict(m2, newdata=df[H:N, ]),
predict(m3, newdata=df[H:N, ]),
predict(m4, newx=as.matrix(df[H:N,2:3 ]))[,1]  ), function(p) RMSE(p, Y[H:N] )))
})
results
dim(results)
t(results)
apply(t(results), 2, mean)
results =
sapply(1:10000, function(kk) {
N = 500
Con = runif(N, -0.2, 0.2)
X = 1*Con + rnorm(N, sd = 0.01)
X2 = runif(N, -0.2, 0.2)
W = matrix(runif(50*N, -0.2, 0.2), N, 50)
Y = 0.5*X - 1.5*Con +  rnorm(N, sd = 0.1)
df = data.frame(Y= Y, X = X, Con=Con)
H = 20
m1 = lm(Y~X+Con, data = df[1:(H-1),])
m2 = lm(Y~X, data = df[1:(H-1),])
m3 = lm(Y~Con, data = df[1:(H-1),])
m4 = glmnet(as.matrix(df[1:(H-1),2:3]), df[1:(H-1),1], lambda = 0.01)
return(sapply(list( predict(m1, newdata=df[H:N, ]),
predict(m2, newdata=df[H:N, ]),
predict(m3, newdata=df[H:N, ]),
predict(m4, newx=as.matrix(df[H:N,2:3 ]))[,1]  ), function(p) RMSE(p, Y[H:N] )))
})
apply(t(results), 2, mean)
apply(t(results), 2, var)
apply(t(results), 2, var)*1e5
mean(apply(predict(m1, newdata=df[H:N, ], interval="confidence")[,2:3], 1, diff))
mean(apply(predict(m2, newdata=df[H:N, ], interval="confidence")[,2:3], 1, diff))
mean(apply(predict(m3, newdata=df[H:N, ], interval="confidence")[,2:3], 1, diff))
summary(m1)
confint(m1)
diff(confint(m1))
mean(apply(predict(m2, newdata=df[H:N, ], interval="confidence")[,2:3], 1, diff))
mean(apply(predict(m3, newdata=df[H:N, ], interval="confidence")[,2:3], 1, diff))
mean(apply(predict(m1, newdata=df[H:N, ], interval="confidence")[,2:3], 1, diff))
mean(apply(predict(m2, newdata=df[H:N, ], interval="confidence")[,2:3], 1, diff))
mean(apply(predict(m3, newdata=df[H:N, ], interval="confidence")[,2:3], 1, diff))
results =
sapply(1:10000, function(kk) {
N = 500
Con = runif(N, -0.2, 0.2)
X = 1*Con + rnorm(N, sd = 0.01)
X2 = runif(N, -0.2, 0.2)
W = matrix(runif(50*N, -0.2, 0.2), N, 50)
Y = 0.5*X - 1.5*Con +  rnorm(N, sd = 0.1)
df = data.frame(Y= Y, X = X, Con=Con)
H = 20
m1 = lm(Y~X+Con, data = df[1:(H-1),])
m2 = lm(Y~X, data = df[1:(H-1),])
m3 = lm(Y~Con, data = df[1:(H-1),])
m4 = glmnet(as.matrix(df[1:(H-1),2:3]), df[1:(H-1),1], lambda = 0.01)
return(c(sapply(list( predict(m1, newdata=df[H:N, ]),
predict(m2, newdata=df[H:N, ]),
predict(m3, newdata=df[H:N, ]),
predict(m4, newx=as.matrix(df[H:N,2:3 ]))[,1]  ), function(p) RMSE(p, Y[H:N] ))),
mean(apply(predict(m1, newdata=df[H:N, ], interval="confidence")[,2:3], 1, diff)),
mean(apply(predict(m2, newdata=df[H:N, ], interval="confidence")[,2:3], 1, diff)),
mean(apply(predict(m3, newdata=df[H:N, ], interval="confidence")[,2:3], 1, diff))
)
})
results =
sapply(1:10000, function(kk) {
N = 500
Con = runif(N, -0.2, 0.2)
X = 1*Con + rnorm(N, sd = 0.01)
X2 = runif(N, -0.2, 0.2)
W = matrix(runif(50*N, -0.2, 0.2), N, 50)
Y = 0.5*X - 1.5*Con +  rnorm(N, sd = 0.1)
df = data.frame(Y= Y, X = X, Con=Con)
H = 20
m1 = lm(Y~X+Con, data = df[1:(H-1),])
m2 = lm(Y~X, data = df[1:(H-1),])
m3 = lm(Y~Con, data = df[1:(H-1),])
m4 = glmnet(as.matrix(df[1:(H-1),2:3]), df[1:(H-1),1], lambda = 0.01)
return(c(sapply(list( predict(m1, newdata=df[H:N, ]),
predict(m2, newdata=df[H:N, ]),
predict(m3, newdata=df[H:N, ]),
predict(m4, newx=as.matrix(df[H:N,2:3 ]))[,1]  ), function(p) RMSE(p, Y[H:N] )),
mean(apply(predict(m1, newdata=df[H:N, ], interval="confidence")[,2:3], 1, diff)),
mean(apply(predict(m2, newdata=df[H:N, ], interval="confidence")[,2:3], 1, diff)),
mean(apply(predict(m3, newdata=df[H:N, ], interval="confidence")[,2:3], 1, diff))
))
})
results
apply(t(results), 2, mean)
apply(t(results), 1, mean)
apply(t(results), 2, var)*1e5
coef(m1)
coef(m2)
coef(m3)
coef(m4)
as.matrix(coef(m4))
coef(m1)
class(coef(m1))
class(coef(m2))
as.matrix(coef(m4))[,1]
set.seed(4)
RMSE = function(p, true) sqrt(mean((true-p)**2))
results =
sapply(1:10000, function(kk) {
N = 500
Con = runif(N, -0.2, 0.2)
X = 1*Con + rnorm(N, sd = 0.01)
X2 = runif(N, -0.2, 0.2)
W = matrix(runif(50*N, -0.2, 0.2), N, 50)
Y = 0.5*X - 1.5*Con +  rnorm(N, sd = 0.1)
df = data.frame(Y= Y, X = X, Con=Con)
H = 20
m1 = lm(Y~X+Con, data = df[1:(H-1),])
m2 = lm(Y~X, data = df[1:(H-1),])
m3 = lm(Y~Con, data = df[1:(H-1),])
m4 = glmnet(as.matrix(df[1:(H-1),2:3]), df[1:(H-1),1], lambda = 0.01)
return(c(sapply(list( predict(m1, newdata=df[H:N, ]),
predict(m2, newdata=df[H:N, ]),
predict(m3, newdata=df[H:N, ]),
predict(m4, newx=as.matrix(df[H:N,2:3 ]))[,1]  ), function(p) RMSE(p, Y[H:N] )),
mean(apply(predict(m1, newdata=df[H:N, ], interval="confidence")[,2:3], 1, diff)),
mean(apply(predict(m2, newdata=df[H:N, ], interval="confidence")[,2:3], 1, diff)),
mean(apply(predict(m3, newdata=df[H:N, ], interval="confidence")[,2:3], 1, diff)),
coef(m1),
coef(m2),
as.matrix(coef(m4))[,1]
))
})
t(results)
results = data.frame(t(results))
colnames(results) = c("RMSE_full", "RMSE_X", "RMSE_Con", "RMSE_ridge",
"Un_full", "Un_X", "Un_Con",
"Full_inter", "Full_X", "Full_Con",
"X_inter", "X_X",
"Con_inter", "Con_Con",
"Ridge_inter", "Ridge_X", "Ridge_Con"
)
results =
sapply(1:10000, function(kk) {
N = 500
Con = runif(N, -0.2, 0.2)
X = 1*Con + rnorm(N, sd = 0.01)
X2 = runif(N, -0.2, 0.2)
W = matrix(runif(50*N, -0.2, 0.2), N, 50)
Y = 0.5*X - 1.5*Con +  rnorm(N, sd = 0.1)
df = data.frame(Y= Y, X = X, Con=Con)
H = 20
m1 = lm(Y~X+Con, data = df[1:(H-1),])
m2 = lm(Y~X, data = df[1:(H-1),])
m3 = lm(Y~Con, data = df[1:(H-1),])
m4 = glmnet(as.matrix(df[1:(H-1),2:3]), df[1:(H-1),1], lambda = 0.01)
return(c(sapply(list( predict(m1, newdata=df[H:N, ]),
predict(m2, newdata=df[H:N, ]),
predict(m3, newdata=df[H:N, ]),
predict(m4, newx=as.matrix(df[H:N,2:3 ]))[,1]  ), function(p) RMSE(p, Y[H:N] )),
mean(apply(predict(m1, newdata=df[H:N, ], interval="confidence")[,2:3], 1, diff)),
mean(apply(predict(m2, newdata=df[H:N, ], interval="confidence")[,2:3], 1, diff)),
mean(apply(predict(m3, newdata=df[H:N, ], interval="confidence")[,2:3], 1, diff)),
coef(m1),
coef(m2),
coef(m3),
as.matrix(coef(m4))[,1]
))
})
results = data.frame(t(results))
colnames(results) = c("RMSE_full", "RMSE_X", "RMSE_Con", "RMSE_ridge",
"Un_full", "Un_X", "Un_Con",
"Full_inter", "Full_X", "Full_Con",
"X_inter", "X_X",
"Con_inter", "Con_Con",
"Ridge_inter", "Ridge_X", "Ridge_Con"
)
results = data.frame(t(results))
colnames(results) = c("RMSE_full", "RMSE_X", "RMSE_Con", "RMSE_ridge",
"Un_full", "Un_X", "Un_Con",
"Full_inter", "Full_X", "Full_Con",
"X_inter", "X_X",
"Con_inter", "Con_Con",
"Ridge_inter", "Ridge_X", "Ridge_Con"
)
results
dim(results)
t(results)
results = data.frame(t(results))
colnames(results) = c("RMSE_full", "RMSE_X", "RMSE_Con", "RMSE_ridge",
"Un_full", "Un_X", "Un_Con",
"Full_inter", "Full_X", "Full_Con",
"X_inter", "X_X",
"Con_inter", "Con_Con",
"Ridge_inter", "Ridge_X", "Ridge_Con"
)
head(results)
tail(results)
apply(results, 2, mean)
round(apply(results, 2, mean), 4)
library(sjSDM)
?sjSDM
library(BayesianTools)
?BayesianTools::DIC()
?BayesianTools::WAIC
library(ranger)
#### Classification ####
data = iris
head(data)
rf = ranger(Species~., data = data, probability = TRUE, importance = "impurity")
# Make predictions:
pred = predict(rf, data = data)
pred$predictions
# Variable importance:
importance(rf)
head(data)
#### Regression ####
# Response: Sepal.Length -> continous
rf = ranger(Sepal.Length~., data = data, classification = FALSE ,importance = "impurity")
# Make predictions:
pred = predict(rf, data = data)
# Probabilities for each species:
pred$predictions
# Variable importance:
importance(rf)
